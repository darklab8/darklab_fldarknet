package front

import (
	"fmt"
	"github.com/darklab8/fl-configs/configs/configs_export"
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-darkstat/darkstat/front/disco"
	"github.com/darklab8/fl-darkstat/darkstat/front/tab"
	"github.com/darklab8/fl-darkstat/darkstat/front/frmt"
	"github.com/darklab8/go-utils/utils"
	"strconv"
	"strings"
)

func EngineDetailedUrl(engine configs_export.Engine) string {
	return "engines/engines_base_" + strings.ToLower(engine.Nickname)
}

templ EnginesTable(engines []configs_export.Engine, pinm PinMod, shared *types.SharedData) {
	<table class="sortable">
		<thead>
			<tr>
				<th style="width:200px;">Engine</th>
				if pinm == PinMode {
					<th style="width:25px;">Select</th>
					<th style="width:25px;">Select</th>
				}
				@disco.ThDisco(shared)
				<th style="width:25px;">Price</th>
				<th style="width:25px;">Buyable</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Impulse", "Speed"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Cruise", "Speed"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Cruise", "Charge", "Time"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Linear", "Drag"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Max", "Force"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Reverse", "Fraction"})
				</th>
				<th style="width:25px;">Flame Effect</th>
				<th style="width:25px;">Trail Effect</th>
				<th style="width:25px;">Nickname</th>
				<th style="width:25px;">HpType</th>
				<th style="width:25px;">Name ID</th>
				<th style="width:25px;">Info ID</th>
				@HashTh("Nickname")
				@HashTh("HPType")
				@HashTh("Flame Eff")
				@HashTh("Trail Eff")
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			for _, engine := range engines {
				@TrFromMainTb(engine.Nickname, EngineDetailedUrl(engine), pinm) {
					@PinTd(engine.Nickname, engine.Name, pinm)
					@PinSelectLeftRight(pinm, EngineDetailedUrl(engine))
					@disco.TdDiscoTarget(shared, disco.GetTdDiscoCacheKey(shared, engine.Nickname))
					<td>{ strconv.Itoa(engine.Price) } </td>
					<td>{ FormatBoolAsYesNo(configs_export.Buyable(engine.Bases)) }</td>
					<td>{ fmt.Sprintf("%.2f",engine.ImpulseSpeed) } </td>
					<td>{ strconv.Itoa(engine.CruiseSpeed) }</td>
					<td>{ strconv.Itoa(engine.CruiseChargeTime) }</td>
					<td>{ strconv.Itoa(engine.LinearDrag) }</td>
					<td>{ strconv.Itoa(engine.MaxForce) }</td>
					<td>{ fmt.Sprintf("%.2f", engine.ReverseFraction) }</td>
					<td class="seo">{ engine.FlameEffect }</td>
					<td class="seo">{ engine.TrailEffect }</td>
					<td class="seo">{ engine.Nickname } </td>
					<td class="seo">{ engine.HpType } </td>
					<td class="seo">{ strconv.Itoa(engine.NameID) } </td>
					<td class="seo">{ strconv.Itoa(engine.InfoID) } </td>
					@HashTd(engine.NicknameHash)
					@HashTd(engine.HpTypeHash)
					@HashTd(engine.FlameEffectHash)
					@HashTd(engine.TrailEffectHash)
					@TdInfoCardClick(configs_export.InfocardKey(engine.Nickname), engine.Nickname, pinm, shared)
				}
			}
		</tbody>
	</table>
}

// https://www.cssscript.com/minimalist-table-sortable/#:~:text=Description%3A-,sorttable.,clicking%20on%20the%20table%20headers
// https://www.cssscript.com/fast-html-table-sorting/
templ Engines(engines []configs_export.Engine, mode tab.ShowEmpty, shared *types.SharedData) {
	@tab.TabMenu(urls.Engines, mode, shared)
	@tab.TabContent() {
		<div class="splitter">
			@tab.LeftTable(){
				@tab.TableTop(){
					@tab.FilterBar(shared)
					<div id="table-top-main">
						@EnginesTable(engines, MainMode, shared)
					</div>
					<div id={ "table-top-main" + string(PinMode) } class="hidden">
						@EnginesTable(engines, PinMode, shared)
					</div>
				}
				@tab.TableBottom(){
					<div id="table-bottom-main">
						@GoodAtBaseSharedT(ShowAsCommodity(false), shared)
					</div>
					<div id={ "table-bottom-main" + string(PinMode) } class="hidden">
						@GoodAtBaseSharedT(ShowAsCommodity(false), shared)
					</div>
				}
			}
			@tab.InfocardTable(){
				@tab.InfocardShared()
			}
		</div>
		@disco.CacheTechCompatTable(shared, utils.CompL(engines, func(x configs_export.Engine) disco.Item { return x }))
	}
}
