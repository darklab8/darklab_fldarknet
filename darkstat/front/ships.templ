package front

import (
	"github.com/darklab8/fl-darkstat/darkstat/front/fronttypes"
	"strconv"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-darkstat/darkstat/common/types"
	"github.com/darklab8/fl-configs/configs/configs_export"
	"fmt"
	"strings"
	// "github.com/darklab8/fl-configs/configs/conftypes"
	"encoding/json"
)

func ShipDetailedUrl(ship configs_export.Ship, mode ShipTabMode) string {
	if mode == ShipShowBases {
		return "ships/ships_base_" + strings.ToLower(ship.Nickname)
	} else if mode == ShipShowDetails {
		return "ships/ships_details_" + strings.ToLower(ship.Nickname)
	}
	panic("unsupported ship mode")
}

type ShipTabMode int64

const (
	ShipShowBases ShipTabMode = iota
	ShipShowDetails
)

func marshalIDs(data fronttypes.DiscoveryIDs, item_nickname string) string {

	var compat_by_id map[string]float64 = make(map[string]float64)

	compat_by_id[""] = data.Config.GetCompatibilty(item_nickname, "")

	for _, id := range data.Ids {
		compat_by_id[string(id.Nickname)] = data.Config.GetCompatibilty(item_nickname, id.Nickname)
	}
	bytes, _ := json.Marshal(compat_by_id)
	return string(bytes)
}

templ ShipTable(ships []configs_export.Ship, mode ShipTabMode, pinm PinMod, disco fronttypes.DiscoveryIDs) {
	<table class={ "sortable", templ.KV("top-main", pinm==MainMode), templ.KV("top-pinned", pinm==PinMode) }>
		<thead>
			<tr>
				<th style="min-width:200px;">Ship</th>
				if pinm == PinMode {
					<th style="min-width:50px;">Select</th>
					<th style="min-width:50px;">Select</th>
				}
				@ThDisco(disco)
				<th style="min-width:50px;">Class</th>
				<th style="min-width:50px;">Type</th>
				<th style="min-width:50px;">Price</th>
				<th style="min-width:50px;">Buyable</th>
				<th style="min-width:50px;">Armor</th>
				<th style="min-width:50px;">Hold Size</th>
				<th style="min-width:50px;">Nanobots</th>
				<th style="min-width:50px;">Batteries</th>
				<th style="min-width:100px;">Max Angular Speed (deg/s)</th>
				<th style="min-width:100px;">Ang Dist. from 0 to 0.5 sec (deg)</th>
				<th style="min-width:50px;">Time to 90% Max Angular Speed (s)</th>
				<th style="min-width:50px;">Power Capacity</th>
				<th style="min-width:50px;">Power Recharge Rate</th>
				<th style="min-width:50px;">Thrust Capacity</th>
				<th style="min-width:50px;">Thrust Recharge Rate</th>
				<th style="min-width:50px;">Impulse Speed</th>
				<th style="min-width:50px;">Reverse Fraction</th>
				<th style="min-width:50px;">Nudge Force</th>
				<th style="min-width:50px;">Strafe Forece</th>
				<th style="min-width:50px;">Nickname</th>
				<th style="min-width:100px;">Name ID</th>
				<th style="min-width:100px;">Info ID</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			for _, ship := range ships {
				// pin add later to hx-target
				<tr
					id={ string(pinm) + "bottominfo_" + ship.Nickname }
					hx-get={ types.GetCtx(ctx).SiteRoot + ShipDetailedUrl(ship, mode) }
					hx-trigger={ "mousedown" }
					hx-target={ "#table-bottom-main" + string(pinm) }
					hx-swap="innerHTML"
					preload={ "mouseover" }
					class={ templ.KV("hidden", pinm == PinMode) }
				>
					@PinTd(ship.Nickname, ship.Name, pinm)
					@PinSelectLeftRight(pinm, ShipDetailedUrl(ship, mode))
					@TdDisco(disco, ship.Nickname, ship.DiscoveryTechCompat)
					<td>{ strconv.Itoa(ship.Class) }</td>
					<td>{ ship.Type }</td>
					<td>{ strconv.Itoa(ship.Price) }</td>
					<td>{ strconv.FormatBool(configs_export.Buyable(ship.Bases)) }</td>
					<td>{ strconv.Itoa(ship.Armor) } </td>
					<td>{ strconv.Itoa(ship.HoldSize) } </td>
					<td>{ strconv.Itoa(ship.Nanobots) }</td>
					<td>{ strconv.Itoa(ship.Batteries) }</td>
					<td>{ fmt.Sprintf("%.2f",ship.MaxAngularSpeedDegS) }</td>
					<td>{ fmt.Sprintf("%.2f",ship.AngularDistanceFrom0ToHalfSec) }</td>
					<td>{ fmt.Sprintf("%.2f",ship.TimeTo90MaxAngularSpeed) }</td>
					<td>{ strconv.Itoa(ship.PowerCapacity) }</td>
					<td>{ strconv.Itoa(ship.PowerRechargeRate) }</td>
					<td>{ strconv.Itoa(ship.ThrustCapacity) }</td>
					<td>{ strconv.Itoa(ship.ThrustRecharge) }</td>
					<td>{ fmt.Sprintf("%.2f",ship.ImpulseSpeed) }</td>
					<td>{ fmt.Sprintf("%.2f",ship.ReverseFraction) }</td>
					<td>{ fmt.Sprintf("%.2f",ship.NudgeForce) }</td>
					<td>{ fmt.Sprintf("%.2f",ship.StrafeForce) }</td>
					<td>{ ship.Nickname } </td>
					<td>{ strconv.Itoa(ship.NameID) } </td>
					<td>{ strconv.Itoa(ship.InfoID) } </td>
					@TdInfoCardClick(configs_export.InfocardKey(ship.Nickname), ship.Nickname, pinm)
				</tr>
			}
		</tbody>
	</table>
}

// https://www.cssscript.com/minimalist-table-sortable/#:~:text=Description%3A-,sorttable.,clicking%20on%20the%20table%20headers
// https://www.cssscript.com/fast-html-table-sorting/
templ ShipsT(ships []configs_export.Ship, mode ShipTabMode, mode2 ShowEmpty, disco fronttypes.DiscoveryIDs) {
	@TabLayout() {
		if mode == ShipShowBases {
			@TabMenu(urls.Ships, mode2)
		} else if mode == ShipShowDetails {
			@TabMenu(urls.ShipDetails, mode2)
		}
		@TabContent() {
			<div class="splitter">
				<div id="table-wrapper">
					<div id="table-top">
						@FilterBar(disco)
						<div id="table-top-main">
							@ShipTable(ships, mode, MainMode, disco)
						</div>
						<div id={ "table-top-main" + string(PinMode) } class="hidden">
							@ShipTable(ships, mode, PinMode, disco)
						</div>
					</div>
					<div id="table-bottom">
						<div id="table-bottom-main">
							if mode == ShipShowBases {
								@GoodAtBaseSharedT(ShowPricePerVolume(false))
							} else if mode == ShipShowDetails {
								@ShipDetailsShared(configs_export.Ship{Name: "not selected"})
							}
						</div>
						<div id={ "table-bottom-main" + string(PinMode) } class="hidden">
							if mode == ShipShowBases {
								@GoodAtBaseSharedT(ShowPricePerVolume(false))
							} else if mode == ShipShowDetails {
								@ShipDetailsShared(configs_export.Ship{Name: "not selected"})
							}
						</div>
					</div>
				</div>
				<div id="infocard_view">
					@InfocardShared()
				</div>
			</div>
		}
	}
}

templ ShipDetailsShared(ship configs_export.Ship) {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="width:50px;min-width:50px;">Ship Hardpoint</th>
				for index, _ := range ship.BiggestHardpoint {
					<th style="width:50px;min-width:50px;">HpType { strconv.Itoa(index) }</th>
				}
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			{ children... }
		</tbody>
	</table>
}

templ ShipDetails(ship configs_export.Ship) {
	<div class="bottom_name">{ ship.Name }</div>
	@ShipDetailsShared(ship) {
		for _, slot := range ship.Slots {
			<tr>
				<td>{ slot.SlotName }</td>
				for _, equip := range slot.AllowedEquip {
					<td>{ equip }</td>
				}
				for _, _ = range ship.BiggestHardpoint[len(slot.AllowedEquip):] {
					<td></td>
				}
				<td></td>
			</tr>
		}
	}
}
