package front

import (
	"github.com/darklab8/fl-darkstat/darkstat/front/fronttypes"
	"strconv"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-darkstat/darkstat/common/types"
	"github.com/darklab8/fl-configs/configs/configs_export"
	"github.com/darklab8/fl-darkstat/darkstat/front/chunk"

	"fmt"
	"strings"
)

func GunDetailedUrl(gun configs_export.Gun, mode GunTabMode) string {
	if mode == GunsShowBases {
		return "guns/guns_base_" + strings.ToLower(gun.Nickname)
	} else if mode == GunsShowDamageBonuses {
		return "guns/guns_bonuses_" + strings.ToLower(gun.Nickname)
	} else if mode == GunsMissiles {
		return "guns/missiles_" + strings.ToLower(gun.Nickname)
	}
	panic("unsupported choice in GunDetailedUrl")
}

type GunTabMode int64

const (
	GunsShowBases GunTabMode = iota
	GunsShowDamageBonuses
	GunsMissiles
)

templ GunTable(gun_chunks []chunk.Chunk[configs_export.Gun], mode GunTabMode, pinm PinMod, disco fronttypes.DiscoveryIDs) {
	<table class="sortable">
		<thead>
			<tr>
				<th style="min-width:200px;">Gun</th>
				if pinm == PinMode {
					<th style="min-width:50px;">Select</th>
					<th style="min-width:50px;">Select</th>
				}
				@ThDisco(disco)
				<th style="min-width:50px;">Class</th>
				<th style="min-width:50px;">Type</th>
				<th style="min-width:50px;">Technology</th>
				<th style="min-width:50px;">Price</th>
				<th style="min-width:50px;">Buyable</th>
				<th style="min-width:50px;">Hull Dmg</th>
				<th style="min-width:50px;">Shield Dmg</th>
				<th style="min-width:50px;">Power Usage</th>
				<th style="min-width:100px;">Refire</th>
				if mode == GunsMissiles {
					<th style="min-width:100px;">Max Angular Vel</th>
				}
				<th style="min-width:100px;">Hull Dmg/s</th>
				<th style="min-width:100px;">Sheld Dmg/s</th>
				<th style="min-width:100px;">Power/s</th>
				<th style="min-width:100px;">Avg. Efficiency</th>
				<th style="min-width:100px;">Anti Hull Eff.</th>
				<th style="min-width:100px;">Anti Shield Eff.</th>
				<th style="min-width:100px;">Value</th>
				<th style="min-width:100px;">Rating</th>
				<th style="min-width:100px;">Speed</th>
				<th style="min-width:100px;">Range</th>
				<th style="min-width:100px;">Toughness</th>
				<th style="min-width:100px;">Hit Pts</th>
				<th style="min-width:100px;">Lootable</th>
				<th style="min-width:100px;">Nickname</th>
				<th style="min-width:100px;">HpType</th>
				<th style="min-width:100px;">Name ID</th>
				<th style="min-width:100px;">Info ID</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			for index, gun_chunk := range gun_chunks {
				<tbody
					id={ gun_chunk.CurrentUrl + string(pinm) }
					class={ gun_chunk.CurrentUrl + string(pinm) }
					hx-get={ gun_chunk.CurrentUrl + string(pinm) }
					hx-trigger={ "load delay:0." + strconv.Itoa(index) + "s" }
					hx-target="this"
					hx-swap="innerHTML"
				></tbody>
			}
		</tbody>
	</table>
}

templ GunChunk(gun_chunk chunk.Chunk[configs_export.Gun], mode GunTabMode, pinm PinMod, disco fronttypes.DiscoveryIDs) {
	for _, gun := range gun_chunk.Items {
		<tr
			id={ string(pinm) + "bottominfo_" + gun.Nickname }
			hx-get={ types.GetCtx(ctx).SiteRoot + GunDetailedUrl(gun, mode) }
			hx-trigger={ "mousedown" }
			hx-target={ "#table-bottom-main" + string(pinm) }
			hx-swap="innerHTML"
			preload={ "mouseover" }
			class={ templ.KV("hidden", pinm == PinMode) }
		>
			@PinTd(gun.Nickname, gun.Name, pinm)
			@PinSelectLeftRight(pinm, GunDetailedUrl(gun, mode))
			@TdDisco(disco, gun.Nickname, gun.DiscoveryTechCompat)
			<td>{ gun.Class }</td>
			<td>{ gun.Type }</td>
			<td>{ gun.DamageType }</td>
			<td>{ strconv.Itoa(gun.Price) } </td>
			<td>{ strconv.FormatBool(configs_export.Buyable(gun.Bases)) }</td>
			<td>{ strconv.Itoa(gun.HullDamage) }</td>
			<td>{ strconv.Itoa(gun.ShieldDamage) }</td>
			<td>{ fmt.Sprintf("%.2f", gun.PowerUsage) }</td>
			<td>{ fmt.Sprintf("%.2f", gun.Refire) }</td>
			if mode == GunsMissiles {
				<td>{ fmt.Sprintf("%.4f", gun.Missile.MaxAngularVelocity) }</td>
			}
			<td>{ fmt.Sprintf("%.2f",gun.HullDamagePerSec) }</td>
			<td>{ fmt.Sprintf("%.2f",gun.ShieldDamagePerSec) }</td>
			<td>{ fmt.Sprintf("%.2f",gun.PowerPerSec) }</td>
			<td>{ fmt.Sprintf("%.2f",gun.AvgEfficiency) }</td>
			<td>{ fmt.Sprintf("%.2f",gun.HullEfficiency) }</td>
			<td>{ fmt.Sprintf("%.2f",gun.ShieldEfficiency) }</td>
			<td>{ fmt.Sprintf("%.2f",gun.Value) }</td>
			<td>{ fmt.Sprintf("%.2f",gun.Rating)  }</td>
			<td>{ fmt.Sprintf("%.2f", gun.Speed) }</td>
			<td>{ fmt.Sprintf("%.2f", gun.Range) }</td>
			<td>{ fmt.Sprintf("%.2f", gun.Toughness) }</td>
			<td>{ gun.HitPts }</td>
			<td>{ strconv.FormatBool(gun.Lootable) }</td>
			<td>{ gun.Nickname } </td>
			<td>{ gun.HpType } </td>
			<td>{ strconv.Itoa(gun.IdsName) } </td>
			<td>{ strconv.Itoa(gun.IdsInfo) } </td>
			<td
				id={ "infocard_click" + gun.Nickname }
				hx-get={ types.GetCtx(ctx).SiteRoot + InfocardURL(configs_export.InfocardKey(gun.Nickname)) }
				hx-trigger={ "mousedown from:#" + string(pinm) + "bottominfo_" + gun.Nickname }
				hx-target="#infocard_view"
				hx-swap="innerHTML"
				preload="mouseover"
			></td>
		</tr>
	}
}

// https://www.cssscript.com/minimalist-table-sortable/#:~:text=Description%3A-,sorttable.,clicking%20on%20the%20table%20headers
// https://www.cssscript.com/fast-html-table-sorting/
templ GunsT(gun_chunks []chunk.Chunk[configs_export.Gun], mode GunTabMode, mode2 ShowEmpty, disco fronttypes.DiscoveryIDs) {
	if mode == GunsShowBases {
		@TabMenu(urls.Guns, mode2)
	} else if mode == GunsShowDamageBonuses {
		@TabMenu(urls.GunModifiers, mode2)
	} else if mode == GunsMissiles {
		@TabMenu(urls.Missiles, mode2)
	}
	@TabContent() {
		<div class="splitter">
			<div id="table-wrapper">
				<div id="table-top">
					@FilterBar(disco)
					<div id="table-top-main">
						@GunTable(gun_chunks, mode, MainMode, disco)
					</div>
					<div id={ "table-top-main" + string(PinMode) } class="hidden">
						@GunTable(gun_chunks, mode, PinMode, disco)
					</div>
				</div>
				<div id="table-bottom">
					<div id="table-bottom-main">
						if mode == GunsShowBases || mode == GunsMissiles {
							@GoodAtBaseSharedT(ShowPricePerVolume(false))
						} else {
							@GunShowModifiersShared()
						}
					</div>
					<div id={ "table-bottom-main" + string(PinMode) } class="hidden">
						if mode == GunsShowBases || mode == GunsMissiles {
							@GoodAtBaseSharedT(ShowPricePerVolume(false))
						} else {
							@GunShowModifiersShared()
						}
					</div>
				</div>
			</div>
			<div id="infocard_view">
				@InfocardShared()
			</div>
		</div>
	}
}

templ GunShowModifiersShared() {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="min-width:50px;width:50px;">Technology</th>
				<th style="min-width:50px;width:50px;">Target Type</th>
				<th style="min-width:50px;width:50px;">Damage Modifier</th>
				<th style="min-width:50px;width:50px;">Hull Dmg</th>
				<th style="min-width:50px;width:50px;">Shield Dmg</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			{ children... }
		</tbody>
	</table>
}

templ GunShowModifiers(gun configs_export.Gun) {
	<div class="bottom_name">{ gun.Name }</div>
	@GunShowModifiersShared() {
		for _, bonus := range gun.DamangeBonuses {
			<tr>
				<td>{ gun.DamageType }</td>
				<td>{ bonus.Type }</td>
				<td>{ fmt.Sprintf("%.2f", bonus.Modifier) }</td>
				<td>{ strconv.Itoa(int(float64(gun.HullDamage)*bonus.Modifier)) }</td>
				<td>{ strconv.Itoa(int(float64(gun.ShieldDamage)*bonus.Modifier)) }</td>
				<td></td>
			</tr>
		}
	}
}
