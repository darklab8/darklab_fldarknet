package front

import (
	"fmt"
	"github.com/darklab8/fl-configs/configs/configs_export"
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-darkstat/darkstat/settings"
	"strconv"
	"strings"
)

func GunDetailedUrl(gun configs_export.Gun, mode GunTabMode) string {
	if mode == GunsShowBases {
		return "guns/guns_base_" + strings.ToLower(gun.Nickname)
	} else if mode == GunsShowDamageBonuses {
		return "guns/guns_bonuses_" + strings.ToLower(gun.Nickname)
	} else if mode == GunsMissiles {
		return "guns/missiles_" + strings.ToLower(gun.Nickname)
	}

	panic("unsupported choice in GunDetailedUrl")
}

func GunPinnedRowUrl(gun configs_export.Gun, mode GunTabMode) string {
	if mode == GunsShowBases {
		return "guns/pinned/guns_base_" + strings.ToLower(gun.Nickname)
	} else if mode == GunsShowDamageBonuses {
		return "guns/pinned/guns_bonuses_" + strings.ToLower(gun.Nickname)
	} else if mode == GunsMissiles {
		return "guns/pinned/missiles_" + strings.ToLower(gun.Nickname)
	}

	panic("unsupported choice in GunDetailedUrl")
}

type GunTabMode int64

const (
	GunsShowBases GunTabMode = iota
	GunsShowDamageBonuses
	GunsMissiles
)

func GetRefire(gun configs_export.Gun) []string {
	regular_value := fmt.Sprintf("%6.2f", gun.Refire)
	if gun.BurstFire == nil {
		return []string{regular_value}
	}
	return []string{regular_value, fmt.Sprintf("( %6.2f )", gun.BurstFire.SustainedRefire)}
}

func GetHullPerSec(gun configs_export.Gun) []string {
	regular_value := fmt.Sprintf("%6.0f",gun.HullDamagePerSec)
	if gun.BurstFire == nil {
		return []string{regular_value}
	}
	return []string{regular_value, fmt.Sprintf("( %6.0f )",gun.BurstFire.SustainedHullDamagePerSec)}
}

func GetShieldPerSec(gun configs_export.Gun) []string {
	regular_value := fmt.Sprintf("%6.0f",gun.AvgShieldDamagePerSec)
	if gun.BurstFire == nil {
		return []string{regular_value}
	}
	return []string{regular_value, fmt.Sprintf("( %6.0f )",gun.BurstFire.SustainedAvgShieldDamagePerSec)}
}

func GetEnergyPerSec(gun configs_export.Gun) []string {
	regular_value := fmt.Sprintf("%6.0f",gun.EnergyDamagePerSec)
	if gun.BurstFire == nil {
		return []string{regular_value}
	}
	return []string{regular_value, fmt.Sprintf("( %6.0f )",gun.BurstFire.SustainedEnergyDamagePerSec)}
}

func GetBurstParams(gun configs_export.Gun) []string {
	burst_ammo := ""
	if gun.BurstFire != nil {
		burst_ammo += strconv.Itoa(gun.BurstFire.Ammo)
	}
	if gun.NumBarrels != nil {
		burst_ammo += fmt.Sprintf(" [%d]", *gun.NumBarrels)
	}
	if gun.BurstFire == nil {
		return []string{burst_ammo}
	}

	return []string{burst_ammo, fmt.Sprintf("(%.2f)", gun.BurstFire.ReloadTime)}
}

func GetPowerPerSec(gun configs_export.Gun) []string {
	regular_value := fmt.Sprintf("%6.0f",gun.PowerUsagePerSec)
	if gun.BurstFire == nil {
		return []string{regular_value}
	}
	return []string{regular_value, fmt.Sprintf("( %6.0f )",gun.BurstFire.SustainedPowerUsagePerSec)}
}

templ GunTable(guns []configs_export.Gun, mode GunTabMode, pinm PinMod, disco types.DiscoveryIDs, infocards configs_export.Infocards) {
	<table class="sortable">
		<thead>
			<tr>
				<th style="width:200px;">Gun</th>
				if pinm == PinMode {
					<th style="width:50px;">Select</th>
					<th style="width:50px;">Select</th>
				}
				@ThDisco(disco)
				<th style="width:5px;">Class</th>
				<th style="width:5px;">Type</th>
				<th style="width:5px;">Price</th>
				<th style="width:5px;">Buyable</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Hull", "dmg"})
				</th>
				<th style="width:5px;">
					@Tooltip("(Hull Dmg * HullDmgFactor + Energy Dmg) * Avg Shield Dmg Modifier") {
						@MultiLinestring([]string{"Avg", "Shield", "Dmg"})
					}
				</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Energy", "Dmg"})
				</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Power", "Usage"})
				</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Refire", "(+Sust.)"})
				</th>
				if disco.Show {
					<th style="width:5px;">
						@MultiLinestring([]string{"Burst", "Ammo","[barre.]" ,"(relo.)"})
					</th>
					<th style="width:5px;">
							@MultiLinestring([]string{"Ammo", "Limit", "(+Max ","Cart.)"})
					</th>
					<th style="width:5px;">
							@MultiLinestring([]string{"Armor", "Pen.",})
					</th>
				}
				if mode == GunsMissiles {
					<th style="width:50px;">
						@MultiLinestring([]string{"Max", "Angular", "Velocity"})
					</th>
				}
				<th style="width:5px;">
					@MultiLinestring([]string{"Hull", "Dmg/s", "(+Sust.)"})
				</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Avg", "Sheld", "Dmg/s", "(+Sust.)"})
				</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Energy", "Dmg/s", "(+Sust.)"})
				</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Power/s", "(+Sust.)"})
				</th>
				<th style="width:5px;">Range</th>
				<th style="width:5px;">Speed</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Avg", "Effic."})
				</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Anti", "Hull", "Effic."})
				</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Anti", "Shield", "Effic."})
				</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Anti", "Energy", "Effic."})
				</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Gun", "Turn", "Rate"})
				</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Dispe", "rsion", "angle"})
				</th>
				<th style="width:5px;">Volume</th>
				<th style="width:5px;">Hit Pts</th>
				<th style="width:5px;">Lootable</th>
				<th style="width:25px;">Technology</th>
				<th style="width:25px;">Nickname</th>
				<th style="width:25px;">HpType</th>
				if settings.Env.IsDetailed {
					<th style="width:25px;">Flash particle name</th>
					<th style="width:25px;">Const effect</th>
					<th style="width:25px;">Munition hit effect</th>
				}
				<th style="width:25px;">Name ID</th>
				<th style="width:25px;">Info ID</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			for _, gun := range guns {
				@GunRow(gun, mode, pinm, disco, infocards, false)
			}
		</tbody>
	</table>
}

templ GunRow(gun configs_export.Gun, mode GunTabMode, pinm PinMod, disco types.DiscoveryIDs, infocards configs_export.Infocards, prerender bool) {
	@TrFromMainTb2(gun.Nickname, GunDetailedUrl(gun, mode), pinm, prerender) {
		@PinTd2(gun.Nickname, gun.Name, pinm, GunPinnedRowUrl(gun, mode))
		@PinSelectLeftRight(pinm, GunDetailedUrl(gun, mode))
		@TdDisco(disco, gun.Nickname, gun.DiscoveryTechCompat)
		<td>{ gun.Class }</td>
		<td>{ gun.Type }</td>
		<td>{ strconv.Itoa(gun.Price) } </td>
		<td>{ FormatBoolAsYesNo(configs_export.Buyable(gun.Bases)) }</td>
		<td>{ strconv.Itoa(gun.HullDamage) }</td>
		<td>
			{ strconv.Itoa(gun.AvgShieldDamage) }
		</td>
		<td>{ strconv.Itoa(gun.EnergyDamage) }</td>
		<td>{ fmt.Sprintf("%.1f", gun.PowerUsage) }</td>
		<td>
			@MultiLinestring(GetRefire(gun))
		</td>
		if disco.Show {
			<td>
				@MultiLinestring(GetBurstParams(gun))
			</td>
			<td>{ GetAmmoLimitFormatted(gun.AmmoLimit) }</td>
			<td>{ fmt.Sprintf("%.2f", gun.DiscoGun.ArmorPen) }</td>
		}
		if mode == GunsMissiles {
			<td>{ fmt.Sprintf("%.4f", gun.Missile.MaxAngularVelocity) }</td>
		}
		<td>
			@MultiLinestring(GetHullPerSec(gun))
		</td>
		<td>
			@MultiLinestring(GetShieldPerSec(gun))
		</td>
		<td>
			@MultiLinestring(GetEnergyPerSec(gun))
		</td>
		<td>
			@MultiLinestring(GetPowerPerSec(gun))
		</td>
		<td>{ fmt.Sprintf("%.0f", gun.Range) }</td>
		<td>{ fmt.Sprintf("%.0f", gun.Speed) }</td>
		<td>{ fmt.Sprintf("%.4f",gun.AvgEfficiency) }</td>
		<td>{ fmt.Sprintf("%.4f",gun.HullEfficiency) }</td>
		<td>{ fmt.Sprintf("%.4f",gun.ShieldEfficiency) }</td>
		<td>{ fmt.Sprintf("%.4f",gun.EnergyDamageEfficiency) }</td>
		<td>{ fmt.Sprintf("%.0f",gun.GunTurnRate) }</td>
		<td>{ fmt.Sprintf("%.2f",gun.DispersionAngle) }</td>
		<td>{ fmt.Sprintf("%.2f",gun.Volume) }</td>
		<td>{ gun.HitPts }</td>
		<td>{ strconv.FormatBool(gun.Lootable) }</td>
		<td class="search-included">{ gun.DamageType }</td>
		<td class="search-included">
			{ gun.Nickname }
		</td>
		<td class="search-included">{ gun.HpType } </td>
		if settings.Env.IsDetailed {
			<td class="search-included">{ gun.FlashParticleName } </td>
			<td class="search-included">{ gun.ConstEffect } </td>
			<td class="search-included">{ gun.MunitionHitEffect } </td>
		}
		<td class="search-included">{ strconv.Itoa(gun.IdsName) } </td>
		<td class="search-included">{ strconv.Itoa(gun.IdsInfo) } </td>
		@TdInfoCardClick(configs_export.InfocardKey(gun.Nickname), gun.Nickname, pinm, disco)
	}
}

// https://www.cssscript.com/minimalist-table-sortable/#:~:text=Description%3A-,sorttable.,clicking%20on%20the%20table%20headers
// https://www.cssscript.com/fast-html-table-sorting/
templ GunsT(guns []configs_export.Gun, mode GunTabMode, mode2 ShowEmpty, disco types.DiscoveryIDs, infocards configs_export.Infocards) {
	if mode == GunsShowBases {
		@TabMenu(urls.Guns, mode2, disco)
	} else if mode == GunsShowDamageBonuses {
		@TabMenu(urls.GunModifiers, mode2, disco)
	} else if mode == GunsMissiles {
		@TabMenu(urls.Missiles, mode2, disco)
	}
	@TabContent() {
		<div class="splitter">
			@LeftTable(){
				@TableTop(){
					@FilterBar(disco)
					<div id="table-top-main">
						@GunTable(guns, mode, MainMode, disco, infocards)
					</div>
					<div id={ "table-top-main" + string(PinMode) } class="hidden">
						@GunTable([]configs_export.Gun{}, mode, PinMode, disco, infocards)
					</div>
				}
				@TableBottom(){
					<div id="table-bottom-main">
						if mode == GunsShowBases || mode == GunsMissiles {
							@GoodAtBaseSharedT(ShowAsCommodity(false))
						} else {
							@GunShowModifiersShared()
						}
					</div>
					<div id={ "table-bottom-main" + string(PinMode) } class="hidden">
						if mode == GunsShowBases || mode == GunsMissiles {
							@GoodAtBaseSharedT(ShowAsCommodity(false))
						} else {
							@GunShowModifiersShared()
						}
					</div>
				}
			}
			@InfocardTable(){
				@InfocardShared()
			}
		</div>
	}
}

templ GunShowModifiersShared() {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="width:150px;">Technology</th>
				<th style="width:150px;">Target Type</th>
				<th style="width:100px;">Damage Modifier</th>
				<th style="width:100px;">Shield Dmg</th>
				<th style="width:100px;">
					@MultiLinestring([]string{"Moded", "Shield Dmg"})
				</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			{ children... }
		</tbody>
	</table>
}

templ GunShowModifiers(gun configs_export.Gun) {
	@BottomFilterBar()
	<div class="bottom_name">{ gun.Name }</div>
	@GunShowModifiersShared() {
		for _, bonus := range gun.DamageBonuses {
			<tr
				onclick="RowHighlighter(this)"
			>
				<td>{ gun.DamageType }</td>
				<td>{ bonus.Type }</td>
				<td>{ fmt.Sprintf("%.2f", bonus.Modifier) }</td>
				<td>{ strconv.Itoa(int(gun.ShieldDamage)) }</td>
				<td>{ strconv.Itoa(int(float64(gun.ShieldDamage)*bonus.Modifier)) }</td>
				<td></td>
			</tr>
		}
	}
}
