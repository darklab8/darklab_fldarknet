package front

import (
	"github.com/darklab8/fl-darkstat/darkstat/front/fronttypes"
	"strconv"
	"github.com/darklab8/fl-darkstat/darkstat/common/types"
	"github.com/darklab8/fl-configs/configs/configs_export"
	"fmt"
	"strings"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
)

func InfocardURL(infocard_key configs_export.InfocardKey) string {
	return "infocards/info_" + strings.ToLower(string(infocard_key))
}

func BaseDetailedUrl(base configs_export.Base, tab_mode BaseMode) string {

	if tab_mode == BaseShowShops {
		return "bases/marketgoods/mg_" + strings.ToLower(base.Nickname)
	} else if tab_mode == BaseShowMissions {
		return "bases/missions/msns_" + strings.ToLower(base.Nickname)
	}

	panic("not supported mode for base")
}

type BaseMode int64

const (
	BaseShowShops BaseMode = iota
	BaseShowMissions
)

templ BasesTable(bases []configs_export.Base, tab_mode BaseMode, pinm PinMod) {
	<table class="sortable">
		<thead>
			<tr>
				<th style="min-width:200px;">Base</th>
				if pinm == PinMode {
					<th style="min-width:50px;">Select</th>
					<th style="min-width:50px;">Select</th>
				}
				<th style="min-width:200px;">Owner - Faction</th>
				<th style="min-width:100px;">System</th>
				if tab_mode == BaseShowMissions {
					<th style="min-width:50px;">Min Award</th>
					<th style="min-width:50px;">Max Award</th>
					<th style="min-width:50px;">Min Offers</th>
					<th style="min-width:50px;">Max Offers</th>
					<th style="min-width:50px;">Vingettes - Offers Limit</th>
					<th style="min-width:50px;">Ship Ranks</th>
					<th style="min-width:50px;">Enemies</th>
					<th style="min-width:50px;">Error</th>
				}
				<th style="min-width:200px;">Base Nickname</th>
				<th style="min-width:50px;">System Nickname</th>
				<th style="min-width:50px;">Pos X</th>
				<th style="min-width:50px;">Pos Y</th>
				<th style="min-width:50px;">Pos Z</th>
				<th style="min-width:100px;">Base Name ID</th>
				<th style="min-width:100px;">Infocard ID</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			for _, base := range bases {
				@BaseRow(base, tab_mode, pinm)
			}
		</tbody>
	</table>
}

templ BaseRow(base configs_export.Base, tab_mode BaseMode, pinm PinMod) {
	@TrFromMainTb(base.Nickname, BaseDetailedUrl(base, tab_mode), pinm) {
		@PinTd(base.Nickname, base.Name, pinm)
		@PinSelectLeftRight(pinm, BaseDetailedUrl(base, tab_mode))
		<td>{ base.FactionName }</td>
		<td>{ base.System }</td>
		if tab_mode == BaseShowMissions {
			<td>{ strconv.Itoa(base.Missions.MinMoneyAward) }</td>
			<td>{ strconv.Itoa(base.Missions.MaxMoneyAward) }</td>
			<td>{ strconv.Itoa(base.Missions.MinOffers) }</td>
			<td>{ strconv.Itoa(base.Missions.MaxOffers) }</td>
			<td>{ strconv.Itoa(base.Missions.Vignettes) }</td>
			<td>{ strings.Join(strings.Fields(fmt.Sprint(base.Missions.NpcRanksAtBase)), ",") }</td>
			<td>
				@PrintEnemies(EnemistToList(base.Missions.EnemiesAtBaseMap))
			</td>
			<td>
				if base.Missions.Err != nil {
					{ base.Missions.Err.Error() }
				}
			</td>
		}
		<td>{ base.Nickname }</td>
		<td>{ base.SystemNickname }</td>
		<td>{ fmt.Sprintf("%.0f", base.Pos.X) }</td>
		<td>{ fmt.Sprintf("%.0f", base.Pos.Y) }</td>
		<td>{ fmt.Sprintf("%.0f", base.Pos.Z) }</td>
		<td>{ strconv.Itoa(base.StridName) }</td>
		<td>{ strconv.Itoa(base.InfocardID) }</td>
		@TdInfoCardClick(base.Infocard, base.Nickname, pinm)
	}
}

// https://www.cssscript.com/minimalist-table-sortable/#:~:text=Description%3A-,sorttable.,clicking%20on%20the%20table%20headers
// https://www.cssscript.com/fast-html-table-sorting/
templ BasesT(bases []configs_export.Base, tab_mode BaseMode, mode ShowEmpty, disco fronttypes.DiscoveryIDs) {
	if tab_mode == BaseShowShops {
		@TabMenu(urls.Bases, mode, disco)
	} else if tab_mode == BaseShowMissions {
		@TabMenu(urls.Missions, mode, disco)
	}
	@TabContent() {
		<div class="splitter">
			<div id="table-wrapper">
				<div id="table-top">
					@FilterBar(fronttypes.DiscoveryIDs{})
					<div id="table-top-main">
						@BasesTable(bases, tab_mode, MainMode)
					</div>
					<div id={ "table-top-main" + string(PinMode) } class="hidden">
						@BasesTable(bases, tab_mode, PinMode)
					</div>
				</div>
				<div id="table-bottom">
					<div id="table-bottom-main">
						if tab_mode == BaseShowShops {
							@BaseMarketGoodsBase()
						} else if tab_mode == BaseShowMissions {
							@BaseMissionsBase()
						}
					</div>
					<div id={ "table-bottom-main" + string(PinMode) } class="hidden">
						if tab_mode == BaseShowShops {
							@BaseMarketGoodsBase()
						} else if tab_mode == BaseShowMissions {
							@BaseMissionsBase()
						}
					</div>
				</div>
			</div>
			<div id="infocard_view">
				@InfocardShared()
			</div>
		</div>
	}
}

templ BaseMarketGoodsBase() {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="min-width:200px;">Good</th>
				<th style="min-width:100px;">Type</th>
				<th style="min-width:50px;">Price To Sell</th>
				<th style="min-width:50px;">Price To Buy</th>
				<th style="min-width:50px;">Level Req'd</th>
				<th style="min-width:50px;">Reputation Req'd</th>
				<th style="min-width:50px;">Base Sells</th>
				<th style="min-width:50px;">Price Modifier</th>
				<th style="min-width:50px;">Price Base</th>
				<th style="min-width:300px;">Nickname</th>
				<th style="min-width:300px;">HpType</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			{ children... }
		</tbody>
	</table>
}

templ BaseMarketGoods(name string, goods []configs_export.MarketGood, tab_mode BaseMode) {
	@BottomFilterBar()
	<div class="bottom_name">{ name }</div>
	@BaseMarketGoodsBase() {
		for _, good := range goods {
			<tr
				hx-get={ types.GetCtx(ctx).SiteRoot + InfocardURL(good.Infocard) }
				hx-trigger="click"
				hx-target="#infocard_view"
				hx-swap="innerHTML"
				preload="mouseover"
				onclick="RowHighlighter(this)"
			>
				<td>{ good.Name }</td>
				<td>{ string(good.Type) }</td>
				<td>
					if good.PriceToSell != nil {
						{ strconv.Itoa(*good.PriceToSell) }
					}
				</td>
				<td>{ strconv.Itoa(good.PriceToBuy) }</td>
				<td>{ strconv.Itoa(good.LevelRequired) }</td>
				<td>{ fmt.Sprintf("%.2f", good.RepRequired) }</td>
				<td>{ strconv.FormatBool(good.BaseSells) }</td>
				<td>{ fmt.Sprintf("%.2f", good.PriceModifier) }</td>
				<td>{ strconv.Itoa(good.PriceBase) }</td>
				<td>{ good.Nickname }</td>
				<td>{ good.HpType }</td>
				<td></td>
			</tr>
		}
	}
}

templ BaseMissionsBase() {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="min-width:200px;">Faction</th>
				<th style="min-width:100px;">Min Difficulty</th>
				<th style="min-width:50px;">Max Difficulty</th>
				<th style="min-width:50px;">Chance</th>
				<th style="min-width:50px;">Min Money Award</th>
				<th style="min-width:50px;">Max Money Award</th>
				<th style="min-width:50px;">Enemies: Faction Name ( Faction Nickname, NPcs exist for NpcRanks)</th>
				// <th style="min-width:50px;">Rep Req</th> // can it be used?
				<th style="min-width:50px;">NpcRanks</th>
				<th style="min-width:300px;">Error</th>
				<th style="min-width:300px;">Faction Nickname</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			{ children... }
		</tbody>
	</table>
}

templ BaseMissions(name string, mission_givers configs_export.BaseMissions, tab_mode BaseMode) {
	@BottomFilterBar()
	<div class="bottom_name">{ name }</div>
	@BaseMissionsBase() {
		for _, msn_giver := range mission_givers.Factions {
			<tr
				hx-get={ types.GetCtx(ctx).SiteRoot + InfocardURL(msn_giver.Infocard) }
				hx-trigger="click"
				hx-target="#infocard_view"
				hx-swap="innerHTML"
				preload="mouseover"
				onclick="RowHighlighter(this)"
			>
				<td>{ msn_giver.FactionName }</td>
				<td>{ fmt.Sprintf("%.2f", msn_giver.MinDifficulty) }</td>
				<td>{ fmt.Sprintf("%.2f", msn_giver.MaxDifficulty) }</td>
				<td>{ strconv.Itoa(msn_giver.Weight) }</td>
				<td>{ strconv.Itoa(msn_giver.MinAward) }</td>
				<td>{ strconv.Itoa(msn_giver.MaxAward) }</td>
				<td>
					@PrintEnemies(msn_giver.Enemies)
				</td>
				<td>{ strings.Join(strings.Fields(fmt.Sprint(msn_giver.NpcRanks)), ",") }</td>
				<td>
					if msn_giver.Err != nil {
						{ msn_giver.Err.Error() }
					}
				</td>
				<td>{ msn_giver.FactionNickname }</td>
				<td></td>
			</tr>
		}
	}
}

func EnemistToList(enemies map[string]configs_export.EnemyFaction) []configs_export.EnemyFaction {
	var result []configs_export.EnemyFaction = make([]configs_export.EnemyFaction, 0, len(enemies))
	for _, enemy := range enemies {
		if enemy.Nickname == "" {
			continue
		}
		result = append(result, enemy)
	}
	return result
}

templ PrintEnemies(enemies []configs_export.EnemyFaction) {
	for enemy_index, enemy := range enemies {
		{ enemy.Name } ( { enemy.Nickname }, { strconv.FormatBool(enemy.NpcExist) } )
		if enemy_index != len(enemies) - 1 {
			{ ", " }
		}
	}
}
