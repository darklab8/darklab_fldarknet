package front

import (
	"github.com/darklab8/fl-darkstat/darkstat/front/fronttypes"
	"strconv"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-configs/configs/configs_export"
	"fmt"
	"strings"
)

func GoodAtBaseInfoTUrl(commodity *configs_export.Commodity) string {
	return "commodities/comm_base_" + strings.ToLower(commodity.Nickname)
}

templ CommodityTable(commodities []*configs_export.Commodity, pinm PinMod, disco fronttypes.DiscoveryIDs) {
	<table class="sortable">
		<thead>
			<tr>
				<th style="min-width:200px;">Commodity</th>
				if pinm == PinMode {
					<th style="min-width:50px;">Select</th>
					<th style="min-width:50px;">Select</th>
				}
				<th style="min-width:50px;">Best Price To Buy</th>
				<th style="min-width:50px;">Best Price To Sell</th>
				<th style="min-width:50px;">Best Buy Per Vol</th>
				<th style="min-width:50px;">Best Sell Per Vol</th>
				<th style="min-width:50px;">Volume</th>
				<th style="min-width:50px;">Profit</th>
				<th style="min-width:50px;">Profit / V</th>
				<th style="min-width:100px;">Nickname</th>
				<th style="min-width:100px;">Name ID</th>
				<th style="min-width:100px;">Infocard ID</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			for _, commodity := range commodities {
				@TrFromMainTb(commodity.Nickname, GoodAtBaseInfoTUrl(commodity), pinm) {
					@PinTd(commodity.Nickname, commodity.Name, pinm)
					@PinSelectLeftRight(pinm, GoodAtBaseInfoTUrl(commodity))
					<td>{ strconv.Itoa(commodity.PriceBestBaseSellsFor) }</td>
					<td>{ strconv.Itoa(commodity.PriceBestBaseBuysFor) }</td>
					<td>{ fmt.Sprintf("%.0f", configs_export.GetPricePerVoume(commodity.PriceBestBaseSellsFor, commodity.Volume)) }</td>
					<td>{ fmt.Sprintf("%.0f", configs_export.GetPricePerVoume(commodity.PriceBestBaseBuysFor, commodity.Volume)) }</td>
					<td>{ fmt.Sprintf("%.6f", commodity.Volume) }</td>
					<td>{ strconv.Itoa(commodity.ProffitMargin) }</td>
					<td>{ fmt.Sprintf("%.0f", configs_export.GetPricePerVoume(commodity.ProffitMargin, commodity.Volume)) }</td>
					<td>{ commodity.Nickname }</td>
					<td>{ strconv.Itoa(commodity.NameID) }</td>
					<td>{ strconv.Itoa(commodity.InfocardID) }</td>
					@TdInfoCardClick(commodity.Infocard, commodity.Nickname, pinm)
				}
			}
		</tbody>
	</table>
}

// https://www.cssscript.com/minimalist-table-sortable/#:~:text=Description%3A-,sorttable.,clicking%20on%20the%20table%20headers
// https://www.cssscript.com/fast-html-table-sorting/
templ CommoditiesT(commodities []*configs_export.Commodity, mode ShowEmpty, disco fronttypes.DiscoveryIDs) {
	@TabMenu(urls.Commodities, mode, disco)
	@TabContent() {
		<div class="splitter">
			<div id="table-wrapper">
				<div id="table-top">
					@FilterBar(fronttypes.DiscoveryIDs{})
					<div id="table-top-main">
						@CommodityTable(commodities, MainMode, disco)
					</div>
					<div id={ "table-top-main" + string(PinMode) } class="hidden">
						@CommodityTable(commodities, PinMode, disco)
					</div>
				</div>
				<div id="table-bottom">
					<div id="table-bottom-main">
						@GoodAtBaseSharedT(ShowAsCommodity(true))
					</div>
					<div id={ "table-bottom-main" + string(PinMode) } class="hidden">
						@GoodAtBaseSharedT(ShowAsCommodity(true))
					</div>
				</div>
			</div>
			<div id="infocard_view">
				@InfocardShared()
			</div>
		</div>
	}
}
