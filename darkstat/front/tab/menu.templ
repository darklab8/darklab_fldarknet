package tab

import (
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-darkstat/darkstat/settings"
	"github.com/darklab8/fl-darkstat/darkstat/front/frmt"
	"github.com/darklab8/go-utils/utils/utils_types"
	"strings"
)

templ Heading(shared *types.SharedData) {
	<style>
		.heading {
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			min-height: 30px;
		}
		.right {
			margin: 10px;
			display: flex;
			flex-direction: column;
		}
		.left {
			align-self: stretch;

		}
		#time, #patch {
			color: var(--color_time);
			font-size: 0.8em;
			align-self: flex-end;
		}
		#heading_string {
			align-self: flex-end;
		}
	</style>
	<div class="heading">
		<div class="left">
			{ children... }
		</div>
		<div class="right">
			if shared.ShowDisco {
				<div id="patch">
					Patch: <a style="color:var(--color_time);" href="https://patch.discoverygc.com/patchlist.xml">{ shared.LatestPatch.Name }</a>
				</div>
			}
			<div id="time">
				Darkstat { settings.Env.AppVersion } refreshed at { types.GetCtx(ctx).Timestamp.Format("02 Jan 2006 15:04:05") } UTC
			</div>
			<div id="heading_string">
				@templ.Raw(types.GetCtx(ctx).Heading)
			</div>
		</div>
	</div>
}


script GoToUrl(current string, themes []string) {
	let index = 0; 

	for (let i=0, item; item = themes[i]; i++) {
	// Look no need to do list[i] in the body of the loop
		console.log("Looping: index ", i, "item" + item);
		if (location.pathname == item) {
			index = i;
		}
	}

	index = index + 1;
	if (index > themes.length -1) {
		index = 0;
	}

	location.href=themes[index];

	// if (location.pathname == current) {
	// 	location.href=opposite;
	// } else {
	// 	location.href=current;
	// }
	
}

templ Button(text []string, get_url utils_types.FilePath, url utils_types.FilePath) {
	if get_url == urls.HashesIndex {
		<a 
			href={ templ.SafeURL(types.GetCtx(ctx).SiteRoot + get_url.ToString()) }
			style="display: block;"
		>
			<button
				class={ templ.KV("selected", strings.Contains(get_url.ToString(), url.ToString())), "button", strings.Join(text,"") }
				role="tab"
				aria-selected="false"
				aria-controls="tab-content"
				style="height: 100%;"
			>
				@frmt.MultiLinestring(text)
			</button>
		</a>

	} else {
		<button
			preload="mouseover"
			hx-trigger="mousedown"
			hx-get={ types.GetCtx(ctx).SiteRoot + get_url.ToString() }
			class={ templ.KV("selected", strings.Contains(get_url.ToString(), url.ToString())), "button", strings.Join(text,"") }
			role="tab"
			aria-selected="false"
			aria-controls="tab-content"
		>
			@frmt.MultiLinestring(text)
		</button>
	}
}

templ TabMenu(url utils_types.FilePath, mode ShowEmpty, shared *types.SharedData) {
	<style>
	.tab-list {
		height: 100%;
		display: flex;
    	flex-wrap: wrap;
    	flex-direction: row;
		align-content: stretch;
	}
	.tab-list .selected {
		background-color: var(--selected);
	}
	.tab-list button {
		font-size: 0.90em;
		background-color: var(--color_background);
		color: var(--color_text);
		border-color: var(--color_border);

		min-width: 45px;
		cursor: pointer;
		min-height: 36px;
	}
	.tab-list button:hover {
		background-color: var(--color_hover);
	}

	button.Docs {
  		border-radius: 25px;
	}

	</style>
	@Heading(shared) {
		<div class="tab-list" role="tablist">
			if mode == false {
				
				@Button([]string{"Bases"}, urls.Bases, url)
				@Button([]string{"Missions"}, urls.Missions, url)
				@Button([]string{"Factions"}, urls.Factions, url)
				@Button([]string{"Bribes"}, urls.Rephacks, url)
				@Button([]string{"Trade", "routes"}, urls.Trades, url)
				@Button([]string{"Ore", "routes"}, urls.Asteroids, url)
				@Button([]string{"Travel", "routes"}, urls.TravelRoutes, url)
				@Button([]string{"Comm", "odities"}, urls.Commodities, url)
				@Button([]string{"Guns"}, urls.Guns, url)
				@Button([]string{"Guns", "Mods"}, urls.GunModifiers, url)
				@Button([]string{"Missiles"}, urls.Missiles, url)
				@Button([]string{"Ammo"}, urls.Ammo, url)
				@Button([]string{"Mines"}, urls.Mines, url)
				@Button([]string{"CMs"}, urls.CounterMeasures, url)
				@Button([]string{"Shields"}, urls.Shields, url)
				@Button([]string{"Thru","sters"}, urls.Thrusters, url)
				@Button([]string{"Ships"}, urls.Ships, url)
				@Button([]string{"Ship", "Details"}, urls.ShipDetails, url)
				@Button([]string{types.GetCtx(ctx).TractorTabName}, urls.Tractors, url)
				if shared.ShowDisco {
					@Button([]string{"ID Rep", "hacks"}, urls.IDRephacks, url)
				}
				@Button([]string{"Engines"}, urls.Engines, url)
				@Button([]string{"Scan","ners"}, urls.Scanners, url)
				@Button([]string{"Hash"}, urls.HashesIndex, url)
				<button preload="mouseover" hx-trigger="mousedown" style="width:60px; border-radius: 20px;" hx-get={ types.GetCtx(ctx).SiteRoot + AllItemsUrl(url).ToString() } role="tab" aria-selected="false" aria-controls="tab-content">
					@frmt.MultiLinestring([]string{"Show", "All"})
				</button>
				@Button([]string{"Docs"}, urls.Docs, url)
			} else {
				
				@Button([]string{"Bases"}, AllItemsUrl(urls.Bases), url)
				@Button([]string{"Missions"}, AllItemsUrl(urls.Missions), url)
				@Button([]string{"Factions"}, AllItemsUrl(urls.Factions), url)
				@Button([]string{"Bribes"}, AllItemsUrl(urls.Rephacks), url)
				@Button([]string{"Trade", "routes"}, AllItemsUrl(urls.Trades), url)
				@Button([]string{"Ore", "routes"}, AllItemsUrl(urls.Asteroids), url)
				@Button([]string{"Travel", "routes"}, AllItemsUrl(urls.TravelRoutes), url)
				@Button([]string{"Comm", "odities"}, AllItemsUrl(urls.Commodities), url)
				@Button([]string{"Guns"}, AllItemsUrl(urls.Guns), url)
				@Button([]string{"Guns", "Mods"}, AllItemsUrl(urls.GunModifiers), url)
				@Button([]string{"Missiles"}, AllItemsUrl(urls.Missiles), url)
				@Button([]string{"Ammo"}, AllItemsUrl(urls.Ammo), url)
				@Button([]string{"Mines"}, AllItemsUrl(urls.Mines), url)
				@Button([]string{"CMs"}, AllItemsUrl(urls.CounterMeasures), url)
				@Button([]string{"Shields"}, AllItemsUrl(urls.Shields), url)
				@Button([]string{"Thru","sters"}, AllItemsUrl(urls.Thrusters), url)
				@Button([]string{"Ships"}, AllItemsUrl(urls.Ships), url)
				@Button([]string{"Ship", "Details"}, AllItemsUrl(urls.ShipDetails), url)
				@Button([]string{types.GetCtx(ctx).TractorTabName}, AllItemsUrl(urls.Tractors), url)
				if shared.ShowDisco {
					@Button([]string{"ID Rep", "hacks"}, AllItemsUrl(urls.IDRephacks), url)
				}
				@Button([]string{"Engines"}, AllItemsUrl(urls.Engines), url)
				@Button([]string{"Scan","ners"}, AllItemsUrl(urls.Scanners), url)
				@Button([]string{"Hash"}, AllItemsUrl(urls.HashesIndex), url)
				<button preload="mouseover" hx-trigger="mousedown" style="width:60px; border-radius: 20px;" hx-get={ types.GetCtx(ctx).SiteRoot + NotAllItemsUrl(url).ToString() } role="tab" aria-selected="false" aria-controls="tab-content">
					@frmt.MultiLinestring([]string{"Don't", "Show All"})
				</button>
				@Button([]string{"Docs"}, AllItemsUrl(urls.Docs), url)
			}
			<button style="width:60px; border-radius: 20px;" onClick={ GoToUrl(types.GetCtx(ctx).SiteRoot, types.GetCtx(ctx).Themes) } type="button">
				@frmt.MultiLinestring([]string{"Color", "Scheme"})
			</button>
			
		</div>
	}
	<hr/>
}


func AllItemsUrl(url utils_types.FilePath) utils_types.FilePath {
	return "all_" + url
}
func NotAllItemsUrl(url utils_types.FilePath) utils_types.FilePath {
	return utils_types.FilePath(strings.ReplaceAll(url.ToString(), "all_", ""))
}
