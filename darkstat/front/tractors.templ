package front

import (
	"fmt"
	"github.com/darklab8/fl-configs/configs/config_consts"
	"github.com/darklab8/fl-configs/configs/configs_export"
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"strconv"
	"strings"
)

func TractorDetailedUrl(tractor configs_export.Tractor, tab_mode TractorMode) string {
	if tab_mode == TractorModShop {
		return "tractor/tractor_base_" + strings.ToLower(string(tractor.Nickname))
	} else if tab_mode == TractorIDRephacks {
		return "id_rephacks/id_rephacks_" + strings.ToLower(string(tractor.Nickname))
	}

	panic("not supported mode for tractor")
}

type TractorMode int64

const (
	TractorModShop TractorMode = iota
	TractorIDRephacks
)

templ TractorHeaders() {
	<th style="width:25px;">Price</th>
	<th style="width:25px;">Buyable</th>
	<th style="width:25px;">
		@MultiLinestring([]string{"Max", "Length"})
	</th>
	<th style="width:25px;">
		@MultiLinestring([]string{"Reach", "Speed"})
	</th>
	<th style="width:25px;">Lootable</th>
	<th style="width:25px;">Nickname</th>
	<th style="width:25px;">Name ID</th>
	<th style="width:25px;">Info ID</th>
	@HashTh("Nickname")
	<th style="max-width:100%;"></th>
}

templ TractorValues(tractor configs_export.Tractor) {
	<td>{ strconv.Itoa(tractor.Price) } </td>
	<td>{ FormatBoolAsYesNo(configs_export.Buyable(tractor.Bases)) }</td>
	<td>{ strconv.Itoa(tractor.MaxLength) } </td>
	<td>{ strconv.Itoa(tractor.ReachSpeed) }</td>
	<td>{ strconv.FormatBool(tractor.Lootable) }</td>
	<td class="seo">{ string(tractor.Nickname) } </td>
	<td class="seo">{ strconv.Itoa(tractor.NameID) } </td>
	<td class="seo">{ strconv.Itoa(tractor.InfoID) } </td>
	@HashTd(tractor.NicknameHash)
}

// https://www.cssscript.com/minimalist-table-sortable/#:~:text=Description%3A-,sorttable.,clicking%20on%20the%20table%20headers
// https://www.cssscript.com/fast-html-table-sorting/
templ TractorsT(tractors []configs_export.Tractor, mode2 ShowEmpty, tab_mode TractorMode, disco types.DiscoveryIDs) {
	if tab_mode == TractorModShop {
		@TabMenu(urls.Tractors, mode2, disco)
	} else if tab_mode == TractorIDRephacks {
		@TabMenu(urls.IDRephacks, mode2, disco)
	}
	@TabContent() {
		<div class="splitter">
			@LeftTable(){
				@TableTop(){
					@FilterBar(types.DiscoveryIDs{})
					<div id="table-top-main">
						<table class="sortable">
							<thead>
								<tr>
									<th style="width:200px;">Tractor</th>
									@TractorHeaders()
								</tr>
							</thead>
							<tbody>
								for _, tractor := range tractors {
									@TrFromMainTb(string(tractor.Nickname), TractorDetailedUrl(tractor, tab_mode), "") {
										<td class="seo">{ tractor.Name }</td>
										@TractorValues(tractor)
										@TdInfoCardClick(configs_export.InfocardKey(tractor.Nickname), string(tractor.Nickname), "", disco)
									}
								}
							</tbody>
						</table>
					</div>
				}
				@TableBottom(){
					<div id="table-bottom-main">
						if tab_mode == TractorModShop {
							@GoodAtBaseSharedT(ShowAsCommodity(false))
						} else if tab_mode == TractorIDRephacks {
							@IDRephacksShared()
						}
					</div>
				}
			}
			@InfocardTable(){
				@InfocardShared()
			}
		</div>
	}
}

templ IDRephacksShared() {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="width:150px;">Faction</th>
				<th style="width:25px;">
					@MultiLinestring([]string{"Faction", "Nickname"})
				</th>
				<th style="width:25px;">Reputation</th>
				<th style="width:25px;">Relationship</th>
				<th style="width:25px;">Rep Type</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			{ children... }
		</tbody>
	</table>
}

templ IDRephacksT(rephack configs_export.Tractor) {
	@BottomFilterBar()
	<div class="bottom_name">{ rephack.Name }</div>
	@IDRephacksShared() {
		for _, rep := range rephack.GetRephacksList() {
			<tr
				hx-get={ types.GetCtx(ctx).SiteRoot + InfocardURL(configs_export.InfocardKey(rep.FactionNick)) }
				hx-trigger="click"
				hx-target="#infocard_view"
				hx-swap="innerHTML"
				preload="mouseover"
				onclick="RowHighlighter(this)"
			>
				<td>
					@WriteRepName(rep.FactionName)
				</td>
				<td>{ string(rep.FactionNick) }</td>
				<td>{ fmt.Sprintf("%.2f", rep.Reputation) }</td>
				<td>{ config_consts.GetRelationshipStatus(rep.Reputation).ToStr() }</td>
				<td>{ rep.RepType.ToStr() }</td>
				<td></td>
			</tr>
		}
	}
}
