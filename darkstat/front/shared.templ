package front

import (
	"fmt"
	"github.com/darklab8/fl-configs/configs/configs_export"
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-darkstat/darkstat/settings"
	"github.com/darklab8/go-utils/utils/utils_types"
	"strconv"
	"strings"
)

templ TabContent() {
	<div id="tab-content" role="tabpanel" class="tab-content">
		{ children... }
	</div>
	<style>
		body {
			background-color: var(--color_background);
			font-weight: 500;
			width: calc(100% - 10px);
		}
		th, td {
			padding-left: 5px;
			padding-bottom: 2px;
			padding-top: 2px;
			padding-right: 5px;
		}

		th, td {
			border-width: 1px;
			border-style: solid;
			border-color: var(--color_border);
		}
		table {
			border-collapse: separate; 
			position: relative;
		}
		th {
			border-color: var(--color_th_border);

			cursor: pointer;

			background: var(--color_background);
			position: sticky;
			top: 0; /* Don't forget this, required for the stickiness */
			
		}
		th:hover {
			background-color: var(--color_hover);
		}
		.bottom_name {
			padding: 5px;
		}
		td {
			border-color: var(--color_border);
		}
		
		tbody tr:nth-child(odd) {
			background-color: var(--color_alternate_row);
		}
		tbody tr {
			cursor: pointer;
		}
		tbody tr:hover {
			background-color: var(--color_hover);
		}

		.selected_row {
			background-color: var(--selected) !important;
			filter: brightness(95%);
		}
		.splitter {
			display: flex;
			flex-direction: row;
			height: calc(100vh - 65px);
			box-sizing: border-box;
		}

		#table-top-main {
			flex-grow: 1;
			flex-shrink: 1;
			overflow: scroll;
			border-style: solid;
			border-width: 4px;
			border-color: var(--color_border);
			box-sizing: border-box;
		}
		#table-top-mainpin {
			flex-shrink: 0;
			overflow-x: scroll;
			border-style: solid;
			border-width: 4px;
			border-color: var(--color_border);
			box-sizing: border-box;
		}
					
		#table-bottom-main {
			min-width: 50%;
			flex-grow:1;
			flex-shrink: 1;
			overflow: scroll;
			border-style: solid;
			border-width: 4px;
			border-color: var(--color_border);
			box-sizing: border-box;
		}
		#table-bottom-main input {
			background: var(--color_background_filter_bars);
		}
		#table-bottom-mainpin {
			min-width: 50%;
			flex-shrink: 1;
			overflow: scroll;
			border-style: solid;
			border-width: 4px;
			border-color: var(--color_border);
			box-sizing: border-box;
		}

		.sortable {
			width: 100%;
			min-width: 800px;

			
		}
		.sortable th, td {
			white-space: nowrap;
		}

		.hidden {
			display: none;
		}
		span.pin {
			color: gray;
		}
		
	</style>
}

templ Heading(disco types.DiscoveryIDs) {
	<style>
		.heading {
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			min-height: 30px;
		}
		.right {
			margin: 10px;
			display: flex;
			flex-direction: column;
		}
		.left {
			align-self: stretch;

		}
		#time, #patch {
			color: var(--color_time);
			font-size: 0.8em;
			align-self: flex-end;
		}
		#heading_string {
			align-self: flex-end;
		}
	</style>
	<div class="heading">
		<div class="left">
			{ children... }
		</div>
		<div class="right">
			if disco.Show {
				<div id="patch">
					Patch: <a style="color:var(--color_time);" href="https://patch.discoverygc.com/patchlist.xml">{ disco.LatestPatch.Name }</a>
				</div>
			}
			<div id="time">
				Darkstat { settings.Env.AppVersion } refreshed at { types.GetCtx(ctx).Timestamp.Format("02 Jan 2006 15:04:05") } UTC
			</div>
			<div id="heading_string">
				@templ.Raw(types.GetCtx(ctx).Heading)
			</div>
		</div>
	</div>
}

type ShowEmpty bool

type ShowAllMode bool

templ Button(text []string, get_url utils_types.FilePath, url utils_types.FilePath) {
	if get_url == urls.HashesIndex {
		<a 
			href={ templ.SafeURL(types.GetCtx(ctx).SiteRoot + get_url.ToString()) }
			style="display: block;"
		>
			<button
				class={ templ.KV("selected", get_url == url), "button", strings.Join(text,"") }
				role="tab"
				aria-selected="false"
				aria-controls="tab-content"
				style="height: 100%;"
			>
				@MultiLinestring(text)
			</button>
		</a>

	} else {
		<button
			preload="mouseover"
			hx-trigger="mousedown"
			hx-get={ types.GetCtx(ctx).SiteRoot + get_url.ToString() }
			class={ templ.KV("selected", get_url == url), "button", strings.Join(text,"") }
			role="tab"
			aria-selected="false"
			aria-controls="tab-content"
		>
			@MultiLinestring(text)
		</button>
	}
}

templ TabMenu(url utils_types.FilePath, mode ShowEmpty, disco types.DiscoveryIDs) {
	<style>
	.tab-list {
		height: 100%;
		display: flex;
    	flex-wrap: wrap;
    	flex-direction: row;
		align-content: stretch;
	}
	.tab-list .selected {
		background-color: var(--selected);
	}
	.tab-list button {
		font-size: 0.90em;
		background-color: var(--color_background);
		color: var(--color_text);
		border-color: var(--color_border);

		min-width: 45px;
		cursor: pointer;
		min-height: 36px;
	}
	.tab-list button:hover {
		background-color: var(--color_hover);
	}

	button.Docs {
  		border-radius: 25px;
	}

	</style>
	@Heading(disco) {
		<div class="tab-list" role="tablist">
			if mode == false {
				
				@Button([]string{"Bases"}, urls.Bases, url)
				@Button([]string{"Missions"}, urls.Missions, url)
				@Button([]string{"Factions"}, urls.Factions, url)
				@Button([]string{"Bribes"}, urls.Rephacks, url)
				@Button([]string{"Trade", "routes"}, urls.Trades, url)
				@Button([]string{"Ore", "routes"}, urls.Asteroids, url)
				@Button([]string{"Travel", "routes"}, urls.TravelRoutes, url)
				@Button([]string{"Comm", "odities"}, urls.Commodities, url)
				@Button([]string{"Guns"}, urls.Guns, url)
				@Button([]string{"Guns", "Mods"}, urls.GunModifiers, url)
				@Button([]string{"Missiles"}, urls.Missiles, url)
				@Button([]string{"Ammo"}, urls.Ammo, url)
				@Button([]string{"Mines"}, urls.Mines, url)
				@Button([]string{"CMs"}, urls.CounterMeasures, url)
				@Button([]string{"Shields"}, urls.Shields, url)
				@Button([]string{"Thru","sters"}, urls.Thrusters, url)
				@Button([]string{"Ships"}, urls.Ships, url)
				@Button([]string{"Ship", "Details"}, urls.ShipDetails, url)
				@Button([]string{types.GetCtx(ctx).TractorTabName}, urls.Tractors, url)
				if disco.Show {
					@Button([]string{"ID Rep", "hacks"}, urls.IDRephacks, url)
				}
				@Button([]string{"Engines"}, urls.Engines, url)
				@Button([]string{"Scan","ners"}, urls.Scanners, url)
				@Button([]string{"Hash"}, urls.HashesIndex, url)
				<button preload="mouseover" hx-trigger="mousedown" style="width:60px; border-radius: 20px;" hx-get={ types.GetCtx(ctx).SiteRoot + AllItemsUrl(url).ToString() } role="tab" aria-selected="false" aria-controls="tab-content">
					@MultiLinestring([]string{"Show", "All"})
				</button>
				@Button([]string{"Docs"}, urls.Docs, url)
			} else {
				
				@Button([]string{"Bases"}, AllItemsUrl(urls.Bases), url)
				@Button([]string{"Missions"}, AllItemsUrl(urls.Missions), url)
				@Button([]string{"Factions"}, AllItemsUrl(urls.Factions), url)
				@Button([]string{"Bribes"}, AllItemsUrl(urls.Rephacks), url)
				@Button([]string{"Trade", "routes"}, AllItemsUrl(urls.Trades), url)
				@Button([]string{"Ore", "routes"}, AllItemsUrl(urls.Asteroids), url)
				@Button([]string{"Travel", "routes"}, AllItemsUrl(urls.TravelRoutes), url)
				@Button([]string{"Comm", "odities"}, AllItemsUrl(urls.Commodities), url)
				@Button([]string{"Guns"}, AllItemsUrl(urls.Guns), url)
				@Button([]string{"Guns", "Mods"}, AllItemsUrl(urls.GunModifiers), url)
				@Button([]string{"Missiles"}, AllItemsUrl(urls.Missiles), url)
				@Button([]string{"Ammo"}, AllItemsUrl(urls.Ammo), url)
				@Button([]string{"Mines"}, AllItemsUrl(urls.Mines), url)
				@Button([]string{"CMs"}, AllItemsUrl(urls.CounterMeasures), url)
				@Button([]string{"Shields"}, AllItemsUrl(urls.Shields), url)
				@Button([]string{"Thru","sters"}, AllItemsUrl(urls.Thrusters), url)
				@Button([]string{"Ships"}, AllItemsUrl(urls.Ships), url)
				@Button([]string{"Ship", "Details"}, AllItemsUrl(urls.ShipDetails), url)
				@Button([]string{types.GetCtx(ctx).TractorTabName}, AllItemsUrl(urls.Tractors), url)
				if disco.Show {
					@Button([]string{"ID Rep", "hacks"}, AllItemsUrl(urls.IDRephacks), url)
				}
				@Button([]string{"Engines"}, AllItemsUrl(urls.Engines), url)
				@Button([]string{"Scan","ners"}, AllItemsUrl(urls.Scanners), url)
				@Button([]string{"Hash"}, AllItemsUrl(urls.HashesIndex), url)
				<button preload="mouseover" hx-trigger="mousedown" style="width:60px; border-radius: 20px;" hx-get={ types.GetCtx(ctx).SiteRoot + NotAllItemsUrl(url).ToString() } role="tab" aria-selected="false" aria-controls="tab-content">
					@MultiLinestring([]string{"Don't", "Show All"})
				</button>
				@Button([]string{"Docs"}, AllItemsUrl(urls.Docs), url)
			}
			<button style="width:60px; border-radius: 20px;" onClick={ GoToUrl(types.GetCtx(ctx).SiteRoot, types.GetCtx(ctx).Themes) } type="button">
				@MultiLinestring([]string{"Color", "Scheme"})
			</button>
			
		</div>
	}
	<hr/>
}

script GoToUrl(current string, themes []string) {
	let index = 0; 

	for (let i=0, item; item = themes[i]; i++) {
	// Look no need to do list[i] in the body of the loop
		console.log("Looping: index ", i, "item" + item);
		if (location.pathname == item) {
			index = i;
		}
	}

	index = index + 1;
	if (index > themes.length -1) {
		index = 0;
	}

	location.href=themes[index];

	// if (location.pathname == current) {
	// 	location.href=opposite;
	// } else {
	// 	location.href=current;
	// }
	
}

templ InfocardShared() {
	<style>
		.infocard {
			margin: 10px;
		}
		.infocard p {
			margin-top: 10px;
			margin-bottom: 10px;
		}
	</style>
	<div class="infocard">
		<h3>infocard</h3>
		{ children... }
	</div>
}

templ Infocard(info configs_export.Infocard) {
	@InfocardShared() {
		for _, line := range info {
			<p>
				@templ.Raw(line)
			</p>
		}
	}
}

templ GoodAtBaseSharedT(is_commodity ShowAsCommodity) {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="width:150px;">Base</th>
				<th style="width:150px;">Faction</th>
				<th style="width:50px;">Region</th>
				<th style="width:100px;">System</th>
				<th style="width:25px;">
					@MultiLinestring([]string{"Nav", "Map"})
				</th>
				if is_commodity {
					<th style="width:25px;">
						@MultiLinestring([]string{"Price", "To", "Sell"})
					</th>
					<th style="width:25px;">
						@MultiLinestring([]string{"Price", "To", "Buy"})
					</th>
				} else {
					<th style="width:50px;">Price</th>
				}
				if is_commodity {
					<th style="width:25px;">
						@MultiLinestring([]string{"Price", "To Sell", "Per Vol"})
					</th>
					<th style="width:25px;">
						@MultiLinestring([]string{"Price", "To Buy", "Per Vol"})
					</th>
				}
				<th style="width:25px;">
					@MultiLinestring([]string{"Base", "Sells"})
				</th>
				<th style="width:25px;">
					@MultiLinestring([]string{"Lev.", "Req."})
				</th>
				<th style="width:25px;">
					@MultiLinestring([]string{"Rep.", "Req."})
				</th>
				<th style="width:100px;">Base Nickname</th>
				<th style="width:20px;">Pos X</th>
				<th style="width:20px;">Pos Y</th>
				<th style="width:20px;">Pos Z</th>
				<th style="width:5px;">
					@MultiLinestring([]string{"Base is", "Reachable"})
				</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			{ children... }
		</tbody>
	</table>
}

type ShowAsCommodity bool

func FormatBoolAsYesNo(value bool) string {
	if value {
		return "yes"
	} else {
		return "no"
	}
}

templ GoodAtBaseInfoT(name string, base_infos []*configs_export.GoodAtBase, is_commodity ShowAsCommodity) {
	@BottomFilterBar()
	<div class="bottom_name">{ name }</div>
	@GoodAtBaseSharedT(is_commodity) {
		for _, base_info := range base_infos {
			<tr
				hx-get={ types.GetCtx(ctx).SiteRoot + InfocardURL(configs_export.InfocardKey(base_info.BaseNickname)) }
				hx-trigger="click"
				hx-target="#infocard_view"
				hx-swap="innerHTML"
				preload="mouseover"
				onclick="RowHighlighter(this)"
				class={ templ.KV("line_through", base_info.NotBuyable) }
			>
				<td>
					@WriteBaseName(base_info.BaseName)
				</td>
				<td>
					@WriteFactioName(base_info.FactionName)
				</td>
				<td>
					@WriteRegionName(base_info.Region)
				</td>
				<td>
					@WriteSystemName(base_info.SystemName)
				</td>
				<td>{ base_info.SectorCoord }</td>
				if is_commodity {
					<td>{ strconv.Itoa(base_info.PriceBaseBuysFor) }</td>
				}
				<td>{ strconv.Itoa(base_info.PriceBaseSellsFor) }</td>
				if is_commodity {
					<td>{ fmt.Sprintf("%.0f", configs_export.GetPricePerVoume(base_info.PriceBaseBuysFor, base_info.Volume)) }</td>
					<td>{ fmt.Sprintf("%.0f", configs_export.GetPricePerVoume(base_info.PriceBaseSellsFor, base_info.Volume)) }</td>
				}
				<td>{ FormatBaseSells(base_info.BaseSells) }</td>
				<td>{ strconv.Itoa(base_info.LevelRequired) }</td>
				<td>{ fmt.Sprintf("%.2f", base_info.RepRequired) }</td>
				<td>
					@WriteLimit(100) {
						{ base_info.BaseNickname }
					}
				</td>
				<td>{ fmt.Sprintf("%.0f", base_info.BasePos.X) }</td>
				<td>{ fmt.Sprintf("%.0f", base_info.BasePos.Y) }</td>
				<td>{ fmt.Sprintf("%.0f", base_info.BasePos.Z) }</td>
				<td>{ FormatBoolAsYesNo(!base_info.NotBuyable) }</td>
				<td></td>
			</tr>
		}
	}
}

func FormatBaseSells(value bool) string {
	if value {
		return "sells" 
	} else {
		return "buysonly"
	}
}

func AllItemsUrl(url utils_types.FilePath) utils_types.FilePath {
	return "all_" + url
}
func NotAllItemsUrl(url utils_types.FilePath) utils_types.FilePath {
	return utils_types.FilePath(strings.ReplaceAll(url.ToString(), "all_", ""))
}

type PinMod string

const (
	MainMode PinMod = ""
	PinMode  PinMod = "pin"
)

script Pin(id string) {
  if (id.includes("pin")) {
	Hide(id)

	if (TableLen(document.querySelector("#table-top-mainpin table")) === 1) {
		Hide("table-top-mainpin")
		Hide("table-bottom-mainpin")
	}
  } else {
	Unhide("pin"+id)
	Unhide("table-top-mainpin")
	Unhide("table-bottom-mainpin")
  }
}

script Pin2(id string) {
  // htmx adding row to table version for performance
  if (id.includes("pin")) {
	// deleting htmx added row in table
	row = document.querySelector("#" + id)
	row.remove()

	if (TableLen(document.querySelector("#table-top-mainpin table")) === 1) {
		Hide("table-top-mainpin")
		Hide("table-bottom-mainpin")
	}
  } else {
	// htmx adds as another element to table
	Unhide("table-top-mainpin")
	Unhide("table-bottom-mainpin")

	rows = document.querySelectorAll("#pin"+id)
	if (rows.length >= 1) {
		for (let i = 1; i < rows.length; i++) {
			rows[i].remove()
		}
	}
  }
}

templ PinTd(nickname string, name string, pinm PinMod) {
	<td style="display:flex;justify-content:space-between;min-width:50px;">
		<span>
			@WriteLimit(200) {
				{ name }
			}
		</span>
		if pinm==MainMode {
			<span style="cursor:copy;" class="pin" onClick={ Pin(string(pinm) + "bottominfo_" + nickname) }>pin</span>
		} else {
			<span style="cursor:no-drop;" class="pin" onClick={ Pin(string(pinm) + "bottominfo_" + nickname) }>unpin</span>
		}
	</td>
}

templ PinTd2(nickname string, name string, pinm PinMod, url string) {
	// htmx adding row to table version for performance
	<td style="display:flex;justify-content:space-between;min-width:50px;" class="search-included">
		<span>{ name }</span>
		if pinm==MainMode {
			<span
				style="cursor:copy;"
				class="pin"
				onClick={ Pin2(string(pinm) + "bottominfo_" + nickname) }
				hx-get={ types.GetCtx(ctx).SiteRoot + url }
				hx-trigger="mousedown"
				hx-target="#table-top-mainpin table tbody"
				hx-swap="beforeend"
			>pin</span>
		} else {
			<span style="cursor:no-drop;" class="pin" onClick={ Pin2(string(pinm) + "bottominfo_" + nickname) }>unpin</span>
		}
	</td>
}

templ FilterBar(disco types.DiscoveryIDs) {
	<style>
		#table-top-panel {
			display: flex;
			flex-direction: row;
			justify-content: space-between;
		}
		#table-top-panel * {
			background: var(--color_background_filter_bars);
		}

		#table-top-panel select {
			background: var(--color_background);
		}

		.filter_input {
			width:100%;
		}

		.filter_input:focus {
			outline: none;
		}
	</style>
	<div id="table-top-panel">
		<input type="text" id="filterinput" class="filter_input" onkeyup="FilteringFunction()" placeholder="Search rows by any content: name, faction, system and etc.."/>
		<input type="text" id="filterinput_infocard" class="filter_input"  onkeyup="FilteringFunction()" placeholder="Search rows by infocards content"/>
		if bool(disco.Show) {
			<select name="IDs" id="tractor_id_selector" onchange="FilteringFunction()">
				<option value="">Filter items by tech compatible ID</option>
				for _, id := range disco.Ids {
					<option value={ string(id.Nickname) }><span>{ id.Name }</span> <span>( { string(id.Nickname) } )</span></option>
				}
			</select>
		}
		{ children... }
	</div>
}

templ PinSelectLeftRight(pinm PinMod, url string) {
	if pinm == PinMode {
		<td
			class="select_left_infocard_trigger"
			hx-get={ types.GetCtx(ctx).SiteRoot + url }
			hx-trigger="mousedown consume"
			hx-target={ "#table-bottom-main" }
			hx-swap="innerHTML"
			preload="mouseover"
			style="cursor:zoom-in; text-align: center;"
		>&#8592;</td>
		<td
			hx-get={ types.GetCtx(ctx).SiteRoot + url }
			hx-trigger="mousedown"
			hx-target={ "#table-bottom-main" + string(pinm) }
			hx-swap="innerHTML"
			preload="mouseover"
			style="cursor:zoom-in; text-align: center;"
		>&#8594;</td>
	}
}

templ ThDisco(disco types.DiscoveryIDs) {
	if disco.Show {
		<th style="width:50px;display:none;" class="tech_compat">ID Compat.</th>
		<th style="width:50px;">TechCell</th>
	}
}

templ TdDisco(
	disco types.DiscoveryIDs,
	nickname string,
	data *configs_export.DiscoveryTechCompat,
) {
	if disco.Show {
		<td style="display:none;" class="tech_compat" techcompats={ marshalIDs(disco, nickname) }>
			{ fmt.Sprintf("%.0f%%",(data.TechcompatByID[""]*100)) }
		</td>
		<td>
			<span class="tooltip">
				<span class="search-included">
				@MagnifyingGlass()
				{ data.TechCell }
				</span>
				<span class="tooltiptext" style="font-size: 0.85em; max-height: 250px; overflow-y: scroll;">
					for _, disco_id := range configs_export.GetOrederedTechCompat(disco.TractorsByID, data) {
						{ fmt.Sprintf("%.0f%%",disco_id.TechCompat*100) } - { disco_id.Tractor.Name }
						<br/>
					}
				</span>
			</span>
		</td>
	}
}

templ TdInfoCardClick(infocardKey configs_export.InfocardKey, nickname string, pinm PinMod, disco types.DiscoveryIDs) {
	@EmbedInfocardForSearch(disco.Infocards, infocardKey)
	if pinm == PinMode {
		<td
			hx-get={ types.GetCtx(ctx).SiteRoot + InfocardURL(infocardKey) }
			hx-trigger={ "mousedown from:closest tr, click from:previous td.select_left_infocard_trigger" }
			hx-target="#infocard_view"
			hx-swap="innerHTML"
		></td>
	} else {
		<td
			hx-get={ types.GetCtx(ctx).SiteRoot + InfocardURL(infocardKey) }
			hx-trigger={ "mousedown from:closest tr" }
			hx-target="#infocard_view"
			hx-swap="innerHTML"
		></td>
	}
}

templ TrFromMainTb(nickname string, detailed_url string, pinm PinMod) {
	@TrFromMainTb2(nickname, detailed_url, pinm, false) {
		{ children... }
	}
}

templ TrFromMainTb2(nickname string, detailed_url string, pinm PinMod, prerender bool) {
	<tr
		id={ string(pinm) + "bottominfo_" + nickname }
		hx-get={ types.GetCtx(ctx).SiteRoot + detailed_url }
		hx-trigger="mousedown"
		hx-target={ "#table-bottom-main" + string(pinm) }
		hx-swap="innerHTML"
		preload="mouseover"
		class={ templ.KV("hidden", pinm == PinMode && !prerender) }
		onclick="RowHighlighter(this)"
	>
		{ children... }
	</tr>
}

func GetFirstLine(infocards configs_export.Infocards, infokey configs_export.InfocardKey) string {
	if infocard_lines, ok := infocards[infokey]; ok {
		if len(infocard_lines) > 0 {
			return string(infocard_lines[0])
		}
	}
	return ""
}

func GetInfocard(infocards configs_export.Infocards, infokey configs_export.InfocardKey) string {
	if infocard_lines, ok := infocards[infokey]; ok {
		return strings.Join(infocard_lines, "")
	}
	return ""
}

templ EmbedInfocardForSearch(infocards configs_export.Infocards, infokey configs_export.InfocardKey) {
	<td style="display:none;">
		<span style="display:none;" class="search-included">{ GetFirstLine(infocards, infokey) }</span>
		<span style="display:none;" class="search-infocard">{ GetInfocard(infocards, infokey) }</span>
	</td>
}

templ BottomFilterBar() {
	<input style="width: 100%;" type="text" id="bottom_input" onkeyup="FilteringForAnyTable('#table-bottom-main', 'bottom_input')" placeholder="Search rows by any content: name, nickname etc.."/>
}

templ WriteBaseName(BaseName string) {
	@WriteLimit(150) {
		{ BaseName }
	}
}

templ WriteFactioName(FactionName string) {
	@WriteLimit(165) {
		{ FactionName }
	}
}

templ WriteRepName(RepName string) {
	@WriteLimit(200) {
		{ RepName }
	}
}

templ WriteTractorID(Name string) {
	@WriteLimit(200) {
		{ Name }
	}
}

templ WriteSystemName(System string) {
	@WriteLimit(120) {
		{ System }
	}
}

templ WriteGoodType(GoodType string) {
	@WriteLimit(100) {
		{ GoodType }
	}
}

templ WriteRegionName(RegionName string) {
	@WriteLimit(170) {
		{ RegionName }
	}
}

templ WriteLimit(limit int) {
	@templ.Raw("<div class=\"search-included\" style=\"width:" + strconv.Itoa(limit) + "px;overflow-x:hidden;overflow-y:hidden;\">")
	{ children... }
	@templ.Raw("</div>")
}

templ Tooltip(tooltip string) {
	<span class="tooltip">
		{ children... }
		<span class="tooltiptext">
			{ tooltip }
		</span>
	</span>
}
