package front

import (
	"github.com/darklab8/fl-darkstat/darkstat/front/fronttypes"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-darkstat/darkstat/common/types"
	"github.com/darklab8/go-utils/goutils/utils/utils_types"
	"github.com/darklab8/fl-configs/configs/configs_export"
	"strconv"
	"fmt"
	"strings"
)

templ TabContent() {
	<div id="tab-content" role="tabpanel" class="tab-content">
		{ children... }
	</div>
	<style>
		#tab-content {
			width: calc(100% - 120px);
			/* 120px is size of tab with buttons */
		}
		body {
			background-color: var(--color_background);
			font-weight: 500;
			width: 100vw;
			height: 100vh;
		}
		th, td {
			padding-left: 5px;
			padding-bottom: 2px;
			padding-top: 2px;
			padding-right: 5px;
		}

		th, td {
			border-width: 1px;
			border-style: solid;
			border-color: var(--color_border);
		}
		table {
			border-collapse: separate; 
			position: relative;
		}
		th {
			border-color: var(--color_th_border);

			cursor: pointer;
			&:hover {
				background-color: var(--color_hover);
			}

			background: var(--color_background);
			position: sticky;
  			top: 0; /* Don't forget this, required for the stickiness */
			
		}
		.bottom_name {
			padding: 5px;
		}
		td {
			border-color: var(--color_border);
		}
		tbody {
			& tr:nth-child(odd) {
				background-color: var(--color_alternate_row);
			}

			& tr {
				cursor: pointer;
				&:hover {
					background-color: var(--color_hover);
				}
			}
		}
		.splitter {
			display: flex;
			flex-direction: row;
			height: 100%;
			width: 100%;
			box-sizing: border-box;
	
			& #table-wrapper {
				width: 75%;
				height: 100%;
				box-sizing: border-box;
				
				& #table-top {
					height: 65%;
					overflow: hidden;
					border-style: solid;
					border-width: 4px;
					border-color: var(--color_border);
					box-sizing: border-box;

					display: flex;
					flex-direction: column;

					& #table-top-main {
						flex-grow: 1;
						flex-shrink: 1;
						overflow: scroll;
						border-style: solid;
						border-width: 4px;
						border-color: var(--color_border);
						box-sizing: border-box;
					}
					& #table-top-mainpin {
						flex-shrink: 0;
						overflow-x: scroll;
						border-style: solid;
						border-width: 4px;
						border-color: var(--color_border);
						box-sizing: border-box;
					}
				}

				
				& #table-bottom {
					overflow: hidden;
					height: 35%;
					border-style: solid;
    				border-width: 4px;
					border-color: var(--color_border);
					box-sizing: border-box;

					display: flex;
					flex-direction: row;

					& #table-bottom-main {
						min-width: 50%;
						flex-grow:1;
						flex-shrink: 1;
						overflow: scroll;
						border-style: solid;
						border-width: 4px;
						border-color: var(--color_border);
						box-sizing: border-box;
					}
					& #table-bottom-mainpin {
						min-width: 50%;
						flex-shrink: 1;
						overflow: scroll;
						border-style: solid;
						border-width: 4px;
						border-color: var(--color_border);
						box-sizing: border-box;
					}
				}
			}
			& #infocard_view {
				width: 25%;
				overflow-y: scroll;
				height: 100%;
				border-style: solid;
				border-width: 4px;
				border-color: var(--color_border);
				box-sizing: border-box;
			}

			.sortable {
				width: 100%;
				min-width: 800px;

				& th, td {
					white-space: nowrap;
				}
			}
		}

	.hidden {
		display: none;
	}
	span.pin {
		color: gray;
	}
		
	</style>
}

templ MenuHeadingLayouts() {
	<style>
		.heading {

			display: flex;
			flex-direction: row;
			justify-content: space-between;

			position: absolute;
			right: 35px;
			bottom: 10px;

			.heading_left {
				align-self: stretch;
			}
			& .heading_custom_phrase {
				margin: 3px;
			}
		}
		
		.menu {
			align-self: stretch;
		}
	</style>
	<div class="heading">
		<div class="heading_left"></div>
		<div class="heading_custom_phrase">
			@templ.Raw(types.GetCtx(ctx).Heading)
		</div>
	</div>
}

type ShowEmpty bool

type ShowAllMode bool

templ Button(text string, get_url utils_types.FilePath, is_selected bool) {
	<button
		preload="mouseover"
		hx-trigger="mousedown"
		hx-get={ types.GetCtx(ctx).SiteRoot + get_url.ToString() }
		class={ templ.KV("selected", is_selected) }
		role="tab"
		aria-selected="false"
		aria-controls="tab-content"
	>{ text }</button>
}

templ TabMenu(url utils_types.FilePath, mode ShowEmpty) {
	<style>
	.tab-buttons {
		height: calc(100% - 20px);
		display: flex;
    	flex-direction: column;

		.selected {
			background-color: var(--selected);
		}
		& button {
			background-color: var(--color_background);
			color: var(--color_text);
			border-color: var(--color_border);

			min-width: 80px;
			flex-basis: 40px;

			cursor: pointer;

			&:hover {
				background-color: var(--color_hover);
			}
		}
	}
	</style>
	<div class="tab-buttons" role="tablist">
		if mode == false {
			@Button("Bases", urls.Bases, urls.Bases == url)
			@Button("Factions", urls.Factions, urls.Factions == url)
			@Button("Rephacks", urls.Rephacks, urls.Rephacks == url)
			@Button("Commodities", urls.Commodities, urls.Commodities == url)
			@Button("Guns", urls.Guns, urls.Guns == url)
			@Button("Gun Modifiers", urls.GunModifiers, urls.GunModifiers == url)
			@Button("Missiles", urls.Missiles, urls.Missiles == url)
			@Button("Mines", urls.Mines, urls.Mines == url)
			@Button("Shields", urls.Shields, urls.Shields == url)
			@Button("Thrusters", urls.Thrusters, urls.Thrusters == url)
			@Button("Ships", urls.Ships, urls.Ships == url)
			@Button("Ship Details", urls.ShipDetails, urls.ShipDetails == url)
			@Button("Tractors", urls.Tractors, urls.Tractors == url)
			@Button("Engines", urls.Engines, urls.Engines == url)
			@Button("CMs", urls.CounterMeasures, urls.CounterMeasures == url)
			<button preload="mouseover" hx-trigger="mousedown" style="width:120px; border-radius: 20px;" hx-get={ types.GetCtx(ctx).SiteRoot + AllItemsUrl(url).ToString() } role="tab" aria-selected="false" aria-controls="tab-content">Show All</button>
		} else {
			@Button("Bases", AllItemsUrl(urls.Bases), urls.Bases == url)
			@Button("Factions", AllItemsUrl(urls.Factions), urls.Factions == url)
			@Button("Rephacks", AllItemsUrl(urls.Rephacks), urls.Rephacks == url)
			@Button("Commodities", AllItemsUrl(urls.Commodities), urls.Commodities == url)
			@Button("Guns", AllItemsUrl(urls.Guns), urls.Guns == url)
			@Button("Gun Modifiers", AllItemsUrl(urls.GunModifiers), urls.GunModifiers == url)
			@Button("Missiles", AllItemsUrl(urls.Missiles), urls.Missiles == url)
			@Button("Mines", AllItemsUrl(urls.Mines), urls.Mines == url)
			@Button("Shields", AllItemsUrl(urls.Shields), urls.Shields == url)
			@Button("Thrusters", AllItemsUrl(urls.Thrusters), urls.Thrusters == url)
			@Button("Ships", AllItemsUrl(urls.Ships), urls.Ships == url)
			@Button("Ship Details", AllItemsUrl(urls.ShipDetails), urls.ShipDetails == url)
			@Button("Tractors", AllItemsUrl(urls.Tractors), urls.Tractors == url)
			@Button("Engines", AllItemsUrl(urls.Engines), urls.Engines == url)
			@Button("CMs", AllItemsUrl(urls.CounterMeasures), urls.CounterMeasures == url)
			<button preload="mouseover" hx-trigger="mousedown" style="width:120px; border-radius: 20px;" hx-get={ types.GetCtx(ctx).SiteRoot + NotAllItemsUrl(url).ToString() } role="tab" aria-selected="false" aria-controls="tab-content">Don't Show All</button>
		}
		<button style="width:120px; border-radius: 20px;" onClick={ GoToUrl(types.GetCtx(ctx).SiteRoot, types.GetCtx(ctx).OppositeThemeRoot) } type="button">Light / Dark</button>
	</div>
}

templ TabLayout() {
	<style>
		.tab-layout {
			height: 100%;
			display: flex;
			flex-direction: row;
		}
	</style>
	<div class="tab-layout">
		{ children... }
	</div>
}

script GoToUrl(current string, opposite string) {
	if (location.pathname == current) {
		location.href=opposite;
	} else {
		location.href=current;
	}
	
}

templ InfocardShared() {
	<style>
		.infocard {
			margin: 10px;

			.infocard_p {
				margin-top: 10px;
				margin-bottom: 10px;
			}
		}
	</style>
	<div class="infocard">
		<h3>infocard</h3>
		{ children... }
	</div>
}

templ Infocard(info configs_export.Infocard) {
	@InfocardShared() {
		for _, line := range info {
			<p class="infocard_p">{ line }</p>
		}
	}
}

templ GoodAtBaseSharedT(show_price_per_volume ShowPricePerVolume) {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="width:250px;min-width:250px;">Base</th>
				<th style="width:100px;min-width:100px;">Faction</th>
				<th style="width:50px;min-width:50px;">System</th>
				<th style="width:50px;min-width:50px;">Price</th>
				if show_price_per_volume {
					<th style="width:50px;min-width:50px;">Price Per Volume</th>
				}
				<th style="width:50px;min-width:50px;">Base Sells</th>
				<th style="width:50px;min-width:50px;">Level Req'd</th>
				<th style="width:50px;min-width:50px;">Reputation Req'd</th>
				<th style="width:50px;min-width:50px;">Base Nickname</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			{ children... }
		</tbody>
	</table>
}

type ShowPricePerVolume bool

templ GoodAtBaseInfoT(name string, base_infos []configs_export.GoodAtBase, show_price_per_volume ShowPricePerVolume) {
	<div class="bottom_name">{ name }</div>
	@GoodAtBaseSharedT(show_price_per_volume) {
		for _, base_info := range base_infos {
			<tr
				hx-get={ types.GetCtx(ctx).SiteRoot + InfocardURL(configs_export.InfocardKey(base_info.BaseNickname)) }
				hx-trigger="click"
				hx-target="#infocard_view"
				hx-swap="innerHTML"
				preload="mouseover"
			>
				<td>{ base_info.BaseName }</td>
				<td>{ base_info.Faction }</td>
				<td>{ base_info.SystemName }</td>
				<td>{ strconv.Itoa(base_info.Price) }</td>
				if show_price_per_volume {
					<td>{ fmt.Sprintf("%.2f", base_info.PricePerVolume) }</td>
				}
				<td>{ strconv.FormatBool(base_info.BaseSells) }</td>
				<td>{ strconv.Itoa(base_info.LevelRequired) }</td>
				<td>{ fmt.Sprintf("%.2f", base_info.RepRequired) }</td>
				<td>{ base_info.BaseNickname }</td>
				<td></td>
			</tr>
		}
	}
}

func AllItemsUrl(url utils_types.FilePath) utils_types.FilePath {
	return "all_" + url
}
func NotAllItemsUrl(url utils_types.FilePath) utils_types.FilePath {
	return utils_types.FilePath(strings.ReplaceAll(url.ToString(), "all_", ""))
}

type PinMod string

const (
	MainMode PinMod = ""
	PinMode  PinMod = "pin"
)

script Pin(id string) {
  if (id.includes("pin")) {
	Hide(id)

	if (TableLen(document.querySelector("#table-top-mainpin table")) === 1) {
		Hide("table-top-mainpin")
		Hide("table-bottom-mainpin")
	}
  } else {
	Unhide("pin"+id)
	Unhide("table-top-mainpin")
	Unhide("table-bottom-mainpin")
  }
}

templ PinTd(nickname string, name string, pinm PinMod) {
	<td style="display:flex;justify-content:space-between;min-width:50px;">
		<span>{ name }</span>
		if pinm==MainMode {
			<span style="cursor:copy;" class="pin" onClick={ Pin(string(pinm) + "bottominfo_" + nickname) }>pin</span>
		} else {
			<span style="cursor:no-drop;" class="pin" onClick={ Pin(string(pinm) + "bottominfo_" + nickname) }>unpin</span>
		}
	</td>
}

templ FilterBar(disco fronttypes.DiscoveryIDs) {
	<style>
	

	#table-top-panel {
		display: flex;
		flex-direction: row;
		justify-content: space-between;

		& #filterinput {
			width:100%;
			background: var(--color_background);
			color: var(--color_text);
			border-color: var(--color_border);
			&:focus {
				outline: none;
			}
		}

		& select {
			background: var(--color_background);
		}
	}
	</style>
	<div id="table-top-panel">
		<input type="text" id="filterinput" onkeyup="FilteringFunction()" placeholder="Search rows by any content: name, faction, system and etc.."/>
		if bool(disco.Show) {
			<select name="IDs" id="tractor_id_selector" onchange="FilteringFunction()">
				<option value="">Tech compatibility by Tractor ID </option>
				for _, id := range disco.Ids {
					<option value={ string(id.Nickname) }><span>{ id.Name }</span> <span>( { string(id.Nickname) } )</span></option>
				}
			</select>
		}
	</div>
}

templ PinSelectLeftRight(pinm PinMod, url string) {
	if pinm == PinMode {
		<td
			class="select_left_infocard_trigger"
			hx-get={ types.GetCtx(ctx).SiteRoot + url }
			hx-trigger="mousedown consume"
			hx-target={ "#table-bottom-main" }
			hx-swap="innerHTML"
			preload="mouseover"
			style="cursor:zoom-in; text-align: center;"
		>&#8592;</td>
		<td
			hx-get={ types.GetCtx(ctx).SiteRoot + url }
			hx-trigger="mousedown"
			hx-target={ "#table-bottom-main" + string(pinm) }
			hx-swap="innerHTML"
			preload="mouseover"
			style="cursor:zoom-in; text-align: center;"
		>&#8594;</td>
	}
}

templ ThDisco(disco fronttypes.DiscoveryIDs) {
	if disco.Show {
		<th style="min-width:50px;">ID Compat.</th>
		<th style="min-width:50px;">TechCell</th>
	}
}

templ TdDisco(disco fronttypes.DiscoveryIDs, nickname string, data *configs_export.DiscoveryTechCompat) {
	if disco.Show {
		<td class="tech_compat" techcompats={ marshalIDs(disco, nickname) }>
			{ fmt.Sprintf("%.0f%%",(data.TechcompatByID[""]*100)) }
		</td>
		<td>{ data.TechCell }</td>
	}
}

templ TdInfoCardClick(infocardKey configs_export.InfocardKey, nickname string, pinm PinMod) {
	if pinm == PinMode {
		<td
			hx-get={ types.GetCtx(ctx).SiteRoot + InfocardURL(infocardKey) }
			hx-trigger={ "mousedown from:closest tr, click from:previous td.select_left_infocard_trigger" }
			hx-target="#infocard_view"
			hx-swap="innerHTML"
		></td>
	} else {
		<td
			hx-get={ types.GetCtx(ctx).SiteRoot + InfocardURL(infocardKey) }
			hx-trigger={ "mousedown from:closest tr" }
			hx-target="#infocard_view"
			hx-swap="innerHTML"
		></td>
	}
}
